[<p><b><span lang="en">Java</span></b>是一種廣泛使用的電腦<a class="mw-redirect" href="/wiki/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%E8%AA%9E%E8%A8%80" title="程式設計語言">程式設計語言</a>，擁有<a class="mw-redirect" href="/wiki/%E8%B7%A8%E5%B9%B3%E5%8F%B0" title="跨平台">跨平台</a>、<a class="mw-redirect" href="/wiki/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91" title="物件導向">物件導向</a>、<a class="mw-redirect" href="/wiki/%E6%B3%9B%E5%9E%8B%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88" title="泛型程式設計">泛型程式設計</a>的特性，廣泛應用於企業級Web應用開發和行動應用開發。
</p>, <p>任職於<a href="/wiki/%E6%98%87%E9%99%BD%E9%9B%BB%E8%85%A6" title="昇陽電腦">昇陽電腦</a>的<a href="/wiki/%E8%A9%B9%E5%A7%86%E6%96%AF%C2%B7%E9%AB%98%E6%96%AF%E6%9E%97" title="詹姆斯·高斯林">詹姆斯·高斯林</a>等人於1990年代初開發Java語言的雛形，最初被命名為Oak，目標設定在<a href="/wiki/%E5%AE%B6%E7%94%A8%E7%94%B5%E5%99%A8" title="家用電器">家用電器</a>等小型系統的<a class="mw-redirect" href="/wiki/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80" title="程式語言">程式語言</a>，應用在<a href="/wiki/%E7%94%B5%E8%A7%86%E6%9C%BA" title="電視機">電視機</a>、<a href="/wiki/%E7%94%B5%E8%AF%9D" title="電話">電話</a>、<a class="mw-redirect" href="/wiki/%E9%97%B9%E9%92%9F" title="鬧鐘">鬧鐘</a>、<a href="/wiki/%E7%83%A4%E9%9D%A2%E5%8C%85%E6%9C%BA" title="烤麵包機">烤麵包機</a>等家用電器的控制和通訊。由於這些<a class="new" href="/w/index.php?title=%E6%99%BA%E8%83%BD%E5%8C%96&amp;action=edit&amp;redlink=1" title="智慧型（頁面不存在）">智慧型</a>家電的市場需求沒有預期的高，<a class="mw-redirect" href="/wiki/%E5%A4%AA%E9%98%B3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F" title="昇陽電腦系統">昇陽電腦系統</a>（<a class="mw-redirect" href="/wiki/Sun%E5%85%AC%E5%8F%B8" title="Sun公司">Sun公司</a>）放棄了該項計劃。隨著1990年代<a class="mw-redirect" href="/wiki/%E7%B6%B2%E9%9A%9B%E7%B6%B2%E8%B7%AF" title="網際網路">網際網路</a>的發展，<a class="mw-redirect" href="/wiki/Sun%E5%85%AC%E5%8F%B8" title="Sun公司">Sun公司</a>看見Oak在<a class="mw-redirect" href="/wiki/%E7%B6%B2%E9%9A%9B%E7%B6%B2%E8%B7%AF" title="網際網路">網際網路</a>上應用的前景，於是改造了Oak，於1995年5月以Java的名稱正式釋出。Java伴隨著網際網路的迅猛發展而發展，逐漸成為重要的網路程式語言。
</p>, <p>Java程式語言的風格十分接近<a href="/wiki/C%2B%2B" title="C++">C++</a>語言。繼承了<a href="/wiki/C%2B%2B" title="C++">C++</a>語言物件導向技術的核心，捨棄了容易引起錯誤的<a class="mw-redirect" href="/wiki/%E6%8C%87%E9%92%88_(%E4%BF%A1%E6%81%AF%E5%AD%A6)" title="指標 (資訊學)">指標</a>，以<a href="/wiki/%E5%8F%83%E7%85%A7" title="參照">參照</a>取代；移除了C++中的<a class="mw-redirect" href="/wiki/%E9%81%8B%E7%AE%97%E5%AD%90%E5%A4%9A%E8%BC%89" title="運算子多載">運算子多载</a>和<a href="/wiki/%E7%BB%A7%E6%89%BF_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)" title="繼承 (電腦科學)">多重繼承</a>特性，用<a href="/wiki/%E6%8E%A5%E5%8F%A3_(Java)" title="介面 (Java)">介面</a>取代；增加<a href="/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)" title="垃圾回收 (計算機科學)">垃圾回收器</a>功能。在Java SE 1.5版本中引入了<a href="/wiki/%E6%B3%9B%E5%9E%8B" title="泛型">泛型程式設計</a>、<a class="mw-redirect" href="/wiki/%E7%B1%BB%E5%9E%8B%E5%AE%89%E5%85%A8" title="類型安全">類型安全</a>的列舉、不定長參數和自動裝/拆箱特性。昇陽電腦對Java語言的解釋是：「Java程式語言是個簡單、物件導向、分散式、解釋性、健壯、安全與系統無關、可移植、高效能、多執行緒和動態的語言」
</p>, <p>Java不同於一般的<a href="/wiki/%E7%B7%A8%E8%AD%AF%E8%AA%9E%E8%A8%80" title="編譯語言">編譯語言</a>或<a href="/wiki/%E7%9B%B4%E8%AD%AF%E8%AA%9E%E8%A8%80" title="直譯語言">直譯語言</a>。它首先將原始碼編譯成<a href="/wiki/%E5%AD%97%E8%8A%82%E7%A0%81" title="位元組碼">位元組碼</a>，再依賴各種不同平台上的虛擬機器來解釋執行位元組碼，從而具有「<a href="/wiki/%E4%B8%80%E6%AC%A1%E7%BC%96%E5%86%99%EF%BC%8C%E5%88%B0%E5%A4%84%E8%BF%90%E8%A1%8C" title="一次編寫，到處執行">一次編寫，到處執行</a>」的跨平台特性。在早期JVM中，這在一定程度上降低了Java程式的執行效率。但在J2SE1.4.2釋出後，Java的執行速度有了大幅提升。
</p>, <p>與傳統型態不同，Sun公司在推出Java時就將其作為開放的技術。全球的Java開發公司被要求所設計的Java軟體必須相互相容。「Java語言靠群體的力量而非公司的力量」是Sun公司的口號之一，並獲得了廣大軟體開發商的認同。這與<a href="/wiki/%E5%BE%AE%E8%BD%AF" title="微軟">微軟</a>公司所倡導的注重精英和封閉式的模式完全不同，此外，<a class="mw-redirect" href="/wiki/%E5%BE%AE%E8%BD%AF%E5%85%AC%E5%8F%B8" title="微軟公司">微軟公司</a>後來推出了與之競爭的<a class="mw-redirect" href="/wiki/.NET_Framework" title=".NET Framework">.NET平台</a>以及模仿Java的<a class="mw-redirect" href="/wiki/C%EF%BC%83" title="C＃">C#</a>語言。後來Sun公司被<a href="/wiki/%E7%94%B2%E9%AA%A8%E6%96%87%E5%85%AC%E5%8F%B8" title="甲骨文公司">甲骨文公司</a>併購，Java也隨之成為甲骨文公司的產品。
</p>, <p>現時，行動<a class="mw-redirect" href="/wiki/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1" title="作業系統">作業系統</a><a href="/wiki/Android" title="Android">Android</a>大部分的代碼採用Java<a class="mw-redirect" href="/wiki/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%E8%AA%9E%E8%A8%80" title="程式設計語言">程式設計語言</a>編程。
</p>, <p>語言最開始只是<a class="mw-redirect" href="/wiki/Sun%E9%9B%BB%E8%85%A6" title="Sun電腦">Sun電腦</a>（Sun MicroSystems）公司在1990年12月開始研究的一個內部項目。Sun電腦公司的一個叫做<span class="ilh-all" data-foreign-title="Patrick Naughton" data-lang-code="en" data-lang-name="英語" data-orig-title="帕特里克·諾頓"><span class="ilh-page"><a class="new" href="/w/index.php?title=%E5%B8%95%E7%89%B9%E9%87%8C%E5%85%8B%C2%B7%E8%AB%BE%E9%A0%93&amp;action=edit&amp;redlink=1" title="派屈克·諾頓（頁面不存在）">派屈克·諾頓</a></span><span class="noprint ilh-comment">（<span class="ilh-lang">英語</span><span class="ilh-colon">：</span><span class="ilh-link"><a class="extiw" href="https://en.wikipedia.org/wiki/Patrick_Naughton" title="en:Patrick Naughton"><span dir="auto" lang="en">Patrick Naughton</span></a></span>）</span></span>的工程師被公司自己開發的<a href="/wiki/C%2B%2B" title="C++">C++</a>和<a class="mw-redirect" href="/wiki/C%E8%AA%9E%E8%A8%80" title="C語言">C語言</a>編譯器搞得焦頭爛額，因為其中的<a href="/wiki/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3" title="應用程式介面">API</a>極其難用。派屈克決定改用<a href="/wiki/NeXT" title="NeXT">NeXT</a>，同時他也獲得了研究公司的一個叫做<b>「Stealth計劃」</b>的項目的機會。
</p>, <p>「Stealth計劃」後來改名為「<b>Green計劃</b>」，<a href="/wiki/%E8%A9%B9%E5%A7%86%E6%96%AF%C2%B7%E9%AB%98%E6%96%AF%E6%9E%97" title="詹姆斯·高斯林">詹姆斯·高斯林</a>和麥克·舍林丹（Mike Sheridan）也加入了派屈克的工作小組。他們和其他幾個工程師一起在<a class="mw-redirect" href="/wiki/%E5%8A%A0%E5%88%A9%E7%A6%8F%E5%B0%BC%E4%BA%9E%E5%B7%9E" title="加利福尼亞州">加利福尼亞州</a><a href="/wiki/%E9%97%A8%E6%B4%9B%E5%B8%95%E5%85%8B_(%E5%8A%A0%E5%88%A9%E7%A6%8F%E5%B0%BC%E4%BA%9A%E5%B7%9E)" title="門洛帕克 (加利福尼亞州)">門羅帕克</a>市<a class="new" href="/w/index.php?title=%E6%B2%99%E4%B8%98%E8%B7%AF&amp;action=edit&amp;redlink=1" title="沙丘路（頁面不存在）">沙丘路</a>的一個小工作室裡面研究開發新技術，瞄準下一代智慧型家電（如<a class="mw-redirect" href="/wiki/%E5%BE%AE%E6%B3%A2%E7%88%90" title="微波爐">微波爐</a>）的程式設計，<a href="/wiki/%E6%98%87%E9%99%BD%E9%9B%BB%E8%85%A6" title="昇陽電腦">Sun</a>公司預料未來科技將在家用電器領域大顯身手。團隊最初考慮使用C++語言，但是很多成員包括Sun的首席科學家<a href="/wiki/%E6%AF%94%E5%B0%94%C2%B7%E4%B9%94%E4%BC%8A" title="比爾·喬伊">比爾·喬伊</a>，發現C++和可用的API在某些方面存在很大問題。
</p>, <p>工作小組使用的是<a href="/wiki/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F" title="嵌入式系統">嵌入式系統</a>，可以用的資源極其有限。很多成員發現C++太複雜以至很多開發者經常錯誤使用。他們發現C++缺少<a href="/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)" title="垃圾回收 (計算機科學)">垃圾回收</a>系統，還有可移植的安全性、<a class="new" href="/w/index.php?title=%E5%88%86%E4%BD%88%E7%A8%8B%E5%BA%8F%E8%A8%AD%E8%A8%88&amp;action=edit&amp;redlink=1" title="分布程式設計（頁面不存在）">分布程式設計</a>、和<a class="mw-redirect" href="/wiki/%E5%A4%9A%E5%9F%B7%E8%A1%8C%E7%B7%92" title="多執行緒">多執行緒</a>功能。最後，他們想要一種易於移植到各種裝置上的平台。
</p>, <p>根據可用的資金，喬伊決定開發一種集<a class="mw-redirect" href="/wiki/C%E8%AA%9E%E8%A8%80" title="C語言">C語言</a>和<a href="/wiki/Mesa%E8%AF%AD%E8%A8%80" title="Mesa語言">Mesa語言</a>大成的新語言，在一份報告上，喬伊把它叫做「未來」，他提議Sun公司的工程師應該在C++的基礎上，開發一種<a class="mw-redirect" href="/wiki/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91" title="物件導向">物件導向</a>的環境。最初，高斯林試圖修改和擴展C++的功能，<mark class="template-facttext" title="需要提供文獻來源">他自己稱這種新語言為C++ ++ --</mark><sup class="noprint Template-Fact"><a href="/wiki/Wikipedia:%E5%88%97%E6%98%8E%E6%9D%A5%E6%BA%90" title="Wikipedia:列明來源"><span style="white-space: nowrap;" title="來源請求。">[來源請求]</span></a></sup>，但是後來他放棄了。他將要創造出一種全新的語言，被他命名為「<b>Oak</b>」（橡樹），以他的辦公室外的橡樹命名。
</p>, <p>就像很多開發新技術的秘密工程一樣，工作小組沒日沒夜地工作到了1993年的夏天，他們能夠演示新平台的一部分了，包括Green<a href="/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F" title="作業系統">作業系統</a>，Oak的程式設計語言，類庫及其硬體。最初的嘗試是面向一種類<a class="mw-redirect" href="/wiki/PDA" title="PDA">PDA</a>裝置，被命名為<b>Star7</b>，這種裝置有鮮豔的圖形介面和被稱為「Duke」的智慧型代理來幫助用戶。1992年12月3日，這台裝置進行了展示。
</p>, <p>同年11月，Green計劃被轉化成了「<b>FirstPerson有限公司</b>」，一個Sun公司的全資子公司，團隊也被重新安排到了<a class="mw-redirect" href="/wiki/%E5%B8%95%E7%BE%85%E5%A5%A7%E5%A4%9A_(%E7%BE%8E%E5%9C%8B%E5%8A%A0%E5%B7%9E)" title="帕羅奧多 (美國加州)">帕洛阿爾托</a>。FirstPerson團隊對建造一種高度互動的裝置感興趣，當<a class="mw-redirect" href="/wiki/%E6%99%82%E4%BB%A3%E8%8F%AF%E7%B4%8D" title="時代華納">時代華納</a>發布了一個關於<a class="mw-redirect" href="/wiki/%E9%9B%BB%E8%A6%96" title="電視">電視</a><a href="/wiki/%E6%95%B8%E4%BD%8D%E8%A6%96%E8%A8%8A%E8%BD%89%E6%8F%9B%E7%9B%92" title="數位視訊轉換盒">機上盒</a>的徵求提議書時（Request for proposal），FirstPerson改變了他們的目標，作為對徵求意見書的響應，提出了一個機上盒平台的提議。但是<a class="mw-redirect" href="/wiki/%E6%9C%89%E7%B7%9A%E9%9B%BB%E8%A6%96" title="有線電視">有線電視</a>業界覺得FirstPerson的平台給予用戶過多的控制權，因此FirstPerson的投標敗給了<a href="/wiki/%E7%A1%85%E8%B0%B7%E5%9B%BE%E5%BD%A2%E5%85%AC%E5%8F%B8" title="矽谷圖形公司">SGI</a>。與<a href="/wiki/3DO%E5%85%AC%E5%8F%B8" title="3DO公司">3DO公司</a>的另外一筆關於機上盒的交易也沒有成功，由於他們的平台不能在電視工業產生任何效益，公司被併回Sun公司。
</p>, <p>由於<a href="/wiki/%E5%95%86%E6%A0%87" title="商標">商標</a>搜尋顯示Oak已被一家顯示卡製造商註冊。於是同年，Oak被改名為<b>Java</b>。當使用十六進位編輯器開啟由Java原始碼編譯出的二進位檔案（.class檔案）的話，最前面的32位元將顯示為CA FE BA BE，即詞組「CAFE BABE」（咖啡屋寶貝）。
</p>, <p>1994年6月，在同<span class="ilh-all" data-foreign-title="John Gage" data-lang-code="en" data-lang-name="英語" data-orig-title="约翰·盖吉"><span class="ilh-page"><a class="new" href="/w/index.php?title=%E7%BA%A6%E7%BF%B0%C2%B7%E7%9B%96%E5%90%89&amp;action=edit&amp;redlink=1" title="約翰·蓋吉（頁面不存在）">約翰·蓋吉</a></span><span class="noprint ilh-comment">（<span class="ilh-lang">英語</span><span class="ilh-colon">：</span><span class="ilh-link"><a class="extiw" href="https://en.wikipedia.org/wiki/John_Gage" title="en:John Gage"><span dir="auto" lang="en">John Gage</span></a></span>）</span></span>、<a href="/wiki/%E8%A9%B9%E5%A7%86%E6%96%AF%C2%B7%E9%AB%98%E6%96%AF%E6%9E%97" title="詹姆斯·高斯林">詹姆斯·高斯林</a>、<a href="/wiki/%E6%AF%94%E5%B0%94%C2%B7%E4%B9%94%E4%BC%8A" title="比爾·喬伊">比爾·喬伊</a>、<span class="ilh-all" data-foreign-title="Patrick Naughton" data-lang-code="en" data-lang-name="英語" data-orig-title="帕特里克·诺顿"><span class="ilh-page"><a class="new" href="/w/index.php?title=%E5%B8%95%E7%89%B9%E9%87%8C%E5%85%8B%C2%B7%E8%AF%BA%E9%A1%BF&amp;action=edit&amp;redlink=1" title="派屈克·諾頓（頁面不存在）">派屈克·諾頓</a></span><span class="noprint ilh-comment">（<span class="ilh-lang">英語</span><span class="ilh-colon">：</span><span class="ilh-link"><a class="extiw" href="https://en.wikipedia.org/wiki/Patrick_Naughton" title="en:Patrick Naughton"><span dir="auto" lang="en">Patrick Naughton</span></a></span>）</span></span>、<span class="ilh-all" data-foreign-title="Wayne Rosing" data-lang-code="en" data-lang-name="英語" data-orig-title="韦恩·罗斯因"><span class="ilh-page"><a class="new" href="/w/index.php?title=%E9%9F%A6%E6%81%A9%C2%B7%E7%BD%97%E6%96%AF%E5%9B%A0&amp;action=edit&amp;redlink=1" title="韋恩·羅斯因（頁面不存在）">韋恩·羅斯因</a></span><span class="noprint ilh-comment">（<span class="ilh-lang">英語</span><span class="ilh-colon">：</span><span class="ilh-link"><a class="extiw" href="https://en.wikipedia.org/wiki/Wayne_Rosing" title="en:Wayne Rosing"><span dir="auto" lang="en">Wayne Rosing</span></a></span>）</span></span>和<a href="/wiki/%E5%9F%83%E9%87%8C%E5%85%8B%C2%B7%E6%96%BD%E5%AF%86%E7%89%B9" title="埃里克·施密特">埃里克·施密特</a>經歷了一場歷時三天的頭腦風暴後，團隊決定再一次改變努力的目標，這次他們決定將該技術應用於<a href="/wiki/%E4%B8%87%E7%BB%B4%E7%BD%91" title="全球資訊網">全球資訊網</a>。他們認為隨著<a href="/wiki/Mosaic" title="Mosaic">Mosaic</a><a class="mw-redirect" href="/wiki/%E6%B5%8F%E8%A7%88%E5%99%A8" title="瀏覽器">瀏覽器</a>的到來，網際網路正在向同樣的高度互動的遠景演變，而這一遠景正是他們在有線電視網中看到的。作為原型，派屈克·諾頓寫了一個小型全球資訊網瀏覽器，WebRunner，後來改名為<a href="/wiki/HotJava" title="HotJava">HotJava</a><sup class="reference" id="cite_ref-16"><a href="#cite_note-16">[12]</a></sup>。
</p>, <p>1994年10月，HotJava和Java平台為公司高層進行演示。1994年，Java 1.0a版本已經可以提供下載，但是Java和HotJava瀏覽器的第一次公開發布卻是在1995年3月23日SunWorld大會上進行的。昇陽公司的科學指導約翰·蓋吉宣告Java技術。這個釋出是與<a href="/wiki/%E7%B6%B2%E6%99%AF" title="網景">網景</a>公司的執行副總裁<a href="/wiki/%E9%A9%AC%E5%85%8B%C2%B7%E5%AE%89%E5%BE%B7%E6%A3%AE" title="馬克·安德森">馬克·安德森</a>的驚人釋出一起進行的，宣布網景將在其瀏覽器中包含對Java的支援。1996年1月，Sun公司成立了Java業務集團，專門開發Java技術。
</p>, <p>在流行幾年之後，Java在瀏覽器中的地位被逐步侵蝕。它在簡單互動性動畫方面的用途已經完全被<a class="mw-redirect" href="/wiki/Adobe_Systems" title="Adobe Systems">Adobe</a>公司的<a href="/wiki/Adobe_Flash" title="Adobe Flash">Flash</a>排擠，2005年Java傾向只被用於<a class="new" href="/w/index.php?title=%E9%9B%85%E8%99%8E%E6%B8%B8%E6%88%8F&amp;action=edit&amp;redlink=1" title="雅虎遊戲（頁面不存在）">雅虎遊戲</a>那樣的更為複雜的應用程式。Java同時遭受到來自微軟的反對，他們決定在新版本的<a href="/wiki/Internet_Explorer" title="Internet Explorer">Internet Explorer</a>和<a href="/wiki/Microsoft_Windows" title="Microsoft Windows">Windows</a>中不再附帶Java平台。
</p>, <p>與此相反，在全球資訊網的伺服器端和手持裝置上，Java變得更加流行。很多網站在後端使用<a href="/wiki/JSP" title="JSP">JSP</a>和其他的Java技術。
</p>, <p>在桌面系統上，獨立的Java程式還是相對少見這是因為Java平台的執行開銷較大，而許多人的電腦上沒有安裝Java，由於網路頻寬在以前較小，下載Java曾經是個耗時的事情。但是隨著電腦計算能力、網路頻寬在10年中取得了很大的進步，同時虛擬機器和編譯器的品質得到了提高，許多應用程式得到了廣泛的使用，包括：
</p>, <p>目前Java提供以下三個版本：
</p>, <p>2006年SUN在<a href="/wiki/JavaOne" title="JavaOne">JavaOne</a>公布Java <a class="mw-redirect" href="/wiki/%E9%96%8B%E6%94%BE%E5%8E%9F%E5%A7%8B%E7%A2%BC" title="開放原始碼">開放原始碼</a>項目，並推出<a href="/wiki/OpenJDK" title="OpenJDK">OpenJDK</a>計劃<sup class="reference" id="cite_ref-17"><a href="#cite_note-17">[13]</a></sup>。<a class="mw-redirect" href="/wiki/Java%E8%99%9B%E6%93%AC%E6%A9%9F" title="Java虛擬機">Java虛擬機</a>、Java<a href="/wiki/%E7%B7%A8%E8%AD%AF%E5%99%A8" title="編譯器">編譯器</a>和Java類庫以GNU通用公眾授權條款公開。
</p>, <p>Java之所以被開發，是要達到以下五個目的：
</p>, <p>Java技術主要分成幾個部分：Java語言、<a href="/wiki/Java%E5%B9%B3%E8%87%BA" title="Java平臺">Java執行環境</a>、類別館。一般情況下說Java時並不區分指的是哪個部分。
</p>, <p>Java在1.5版本時，做了重大改變，Sun公司並1.5版本重新命名為<a href="/wiki/Java_5.0" title="Java 5.0">Java 5.0</a>。
</p>, <p>Java的特點之一就是<a href="/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1" title="物件導向程式設計">物件導向</a>，是程式設計方法的一種。「物件導向程式設計語言」的核心之一就是開發者在設計軟體的時候可以使用自訂的類型和關聯操作。程式碼和資料的實際集合體叫做「物件」。一個物件可以想像成繫結了很多「行為（程式碼）」和「狀態（資料）」的物體。對於資料結構的改變需要和程式碼進行通信然後操作，反之亦然。物件導向設計讓大型軟體工程的計劃和設計變得更容易管理，能增強工程的健康度，減少失敗工程的數量。
</p>, <p>跨平台性是Java主要的特性之一，跨平台使得用Java語言編寫的程式可以在編譯後不用經過任何更改，就能在任何硬體裝置條件下執行。這個特性經常被稱為「一次編譯，到處執行」。
</p>, <p>執行Java應用程式必須安裝<b>Java 執行時環境</b>（Java Runtime Environment，JRE），JRE包括<a href="/wiki/Java%E8%99%9A%E6%8B%9F%E6%9C%BA" title="Java虛擬機器">Java虛擬機器</a>（Java Virtual Machine，JVM），以及Java平台核心類和基礎Java 平台庫。<sup class="reference" id="cite_ref-19"><a href="#cite_note-19">[15]</a></sup>通過JVM才能在電腦系統執行Java應用程式（Java Application），這與<b><a class="mw-redirect" href="/wiki/.Net_Framework" title=".Net Framework">.Net Framework</a></b>的情況一樣，所以電腦上沒有安裝JVM，那麼這些java程式將不能夠執行。
</p>, <p>實現跨平台性的方法是大多數編譯器在進行Java語言程式的編碼時候會生成一個用<a href="/wiki/%E5%AD%97%E8%8A%82%E7%A0%81" title="位元組碼">位元組碼</a>寫成的「半成品」，這個「半成品」會在Java虛擬機器（解釋層）的幫助下執行，虛擬機器會把它轉換成目前所處硬體平台的原始程式碼。之後，Java虛擬機器會開啟標準庫，進行資料（圖片、執行緒和網路）的存取工作。主要注意的是，儘管已經存在一個進行程式碼翻譯的解釋層，有些時候Java的位元組碼程式碼還是會被<a class="mw-redirect" href="/wiki/JIT" title="JIT">JIT</a>編譯器進行二次編譯。
</p>, <p>有些編譯器，比如<a href="/wiki/GCJ" title="GCJ">GCJ</a>，可以自動生成原始程式碼而不需要解釋層。但是這些編譯器所生成的程式碼只能應用於特定平台。並且<a href="/wiki/GCJ" title="GCJ">GCJ</a>目前只支援部分的Java API。
</p>, <p>甲骨文公司對於Java的授權是「全相容的」，這也導致了微軟和昇陽關於微軟的程式不支援RMI和JNI介面、並且增加特性為己所用的法律爭端。昇陽最終贏得了官司，獲得了大約兩千萬<a href="/wiki/%E7%BE%8E%E5%85%83" title="美元">美元</a>的賠償，法院強制要求微軟執行昇陽公司關於Java的授權要求。作為回應，<a href="/wiki/%E5%BE%AE%E8%BD%AF" title="微軟">微軟</a>不再在<a class="mw-redirect" href="/wiki/Windows" title="Windows">Windows</a>系統中捆綁Java，最新的Windows版本，<a href="/wiki/Windows_Vista" title="Windows Vista">Windows Vista</a>和Internet Explorer 7.0版本也不再提供對於Java應用程式和控制項的支援。但是昇陽公司和其他使用Java執行時系統的公司在Windows作業系統下對用戶提供無償的第三方外掛程式和程式支援。
</p>, <p>Java語言使用解釋層最初是為了輕巧性。所以這些程式的執行效率比C語言和C++要低很多，用戶也對此頗有微詞。很多最近的調查顯示Java的程式執行速度比幾年前要高出許多，有些同樣功能的程式的效率甚至超過了C++和C語言編寫的程式。
</p>, <p>Java語言在最開始應用的時候是沒有解釋層的，所有需要編譯的程式碼都直接轉換成機器的原始程式碼。這樣做雖然使程式獲得了最佳的效能，但是導致程式異常臃腫。從JIT技術開始，Java的程式都經過一次轉換之後才變成機器碼。很多老牌的第三方虛擬機器都使用一種叫做「<a href="/wiki/%E5%8B%95%E6%85%8B%E7%B7%A8%E8%AD%AF" title="動態編譯">動態編譯</a>」的技術，也就是說虛擬機器即時監測和分析程式的執行行為，同時選擇性地對程式所需要的部分進行編譯和最佳化。所有這些技術都改善了程式碼的執行速度，但是又不會讓程式的體積變得失常。
</p>, <p>程式的輕便性事實上是軟體編寫很難達到的一個目標，Java雖然成功地實現了「一次編譯，到處執行」，但是由於平台和平台之間的差異，所編寫的程式在轉換程式碼的時候難免會出現微小的、不可察覺的錯誤和意外。有些程式設計師對此非常頭疼，他們嘲笑Java的程式不是「一次編譯，到處執行」，而是「一次編譯，到處除錯」。以Java AWT為例，早期Java AWT內提供的按鈕、文字區等均是以電腦系統所預設的樣式而顯示。這令Java程式在有些沒有提供圖案的電腦系統產生錯誤（在Microsoft Windows設有視窗管理員，在一些Linux distribution則沒有）。後來SUN公司針對Java AWT一些問題而推出Java Swing。
</p>, <p>平台無關性讓Java在伺服器端軟體領域非常成功。很多伺服器端軟體都使用Java或相關技術建立。
</p>, <p>C++語言被用戶詬病的原因之一是大多數C++編譯器不支援<a href="/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)" title="垃圾回收 (計算機科學)">垃圾收集</a>機制。通常使用C++編程的時候，程式設計師於程式中初始化物件時，會在主機<a class="mw-disambig" href="/wiki/%E8%A8%98%E6%86%B6%E9%AB%94" title="記憶體">記憶體</a><a class="mw-redirect" href="/wiki/%E5%A0%86%E7%96%8A" title="堆疊">堆疊</a>上分配一塊記憶體與位址，當不需要此物件時，進行解構或者刪除的時候再釋放分配的記憶體位址。如果物件是在堆疊上分配的，而程式員又忘記進行刪除，那麼就會造成<a class="mw-redirect" href="/wiki/%E8%A8%98%E6%86%B6%E9%AB%94%E6%B4%A9%E6%BC%8F" title="記憶體洩漏">記憶體洩漏</a>（Memory Leak）。長此以往，程式運行的時候可能會生成很多不清除的垃圾，浪費了不必要的記憶體空間。而且如果同一記憶體位址被刪除兩次的話，程式會變得不穩定，甚至崩潰。因此有經驗的C++程式員都會在刪除之後將指標重設為NULL，然後在刪除之前先判斷指標是否為NULL。
</p>, <p>C++中也可以使用「智慧型指標」（Smart Pointer）或者使用<a href="/wiki/C%2B%2B%E6%89%98%E7%AE%A1%E6%89%A9%E5%B1%95" title="C++代管擴充">C++代管擴展</a>編譯器的方法來實現自動化記憶體釋放，智慧型指標可以在<a class="new" href="/w/index.php?title=%E6%A8%99%E6%BA%96%E9%A1%9E%E5%BA%AB&amp;action=edit&amp;redlink=1" title="標準類庫（頁面不存在）">標準類庫</a>中找到，而C++代管擴展被微軟的Visual C++ 7.0及以上版本所支援。智慧型指標的優點是不需引入緩慢的垃圾收集機制，而且可以不考慮執行緒安全的問題，但是缺點是如果不善使用智慧型指標的話，效能有可能不如垃圾收集機制，而且不斷地分配和釋放記憶體可能造成記憶體碎片，需要手動對堆進行壓縮。除此之外，由於智慧型指標是一個基於模板的功能，所以沒有經驗的程式員在需要使用多態特性進行自動清理時也可能束手無策。
</p>, <p>Java語言則不同，上述的情況被自動垃圾收集功能自動處理。物件的建立和放置都是在記憶體堆疊上面進行的。當一個物件沒有任何參照的時候，Java的自動垃圾收集機制就發揮作用，自動刪除這個物件所佔用的空間，釋放記憶體以避免記憶體洩漏。
</p>, <p>注意程式設計師不需要修改finalize方法，自動垃圾收集也會發生作用。但是記憶體洩漏並不是就此避免了，當程式員疏忽大意地忘記解除一個物件不應該有的參照時，記憶體洩漏仍然不可避免。
</p>, <p>不同廠商、不同版本的JVM中的記憶體垃圾回收機制並不完全一樣，通常越新版本的記憶體回收機制越快，IBM、BEA、SUN等等開發JVM的公司都曾宣稱過自己製造出了世界上最快的JVM，JVM效能的世界紀錄也在不斷的被打破並提高。
</p>, <p>IBM有一篇有關Java記憶體回收機制比不啟用垃圾收集機制的C++記憶體處理快數倍的技術文章<sup class="reference" id="cite_ref-20"><a href="#cite_note-20">[16]</a></sup>，而著名的Java技術書籍《Java編程思想》（<i>Thinking in Java</i>）也有一段論述Java記憶體及效能達到甚至超過C++的章節<sup class="reference" id="cite_ref-21"><a href="#cite_note-21">[17]</a></sup>。
</p>, <p>編寫Java程式前應注意以下幾點：
</p>, <p>下面列出了Java<a class="mw-redirect" href="/wiki/%E9%97%9C%E9%8D%B5%E5%AD%97" title="關鍵字">關鍵字</a>。這些關鍵字不能用於<a class="mw-redirect" href="/wiki/%E5%B8%B8%E9%87%8F" title="常數">常數</a>、<a class="mw-redirect" href="/wiki/%E5%8F%98%E9%87%8F" title="變數">變數</a>、和任何<a class="mw-redirect" href="/wiki/%E6%A0%87%E8%AF%86%E7%AC%A6" title="識別碼">識別碼</a>的名稱。
</p>, <p><a class="mw-disambig" href="/wiki/%E6%B3%A8%E9%87%8A" title="注釋">注釋</a>的作用：標識程式是幹什麼的，以及它是如何構建的。注釋幫助程式設計師進行相互溝通以及理解程式。注釋不是程式設計語言，所以編譯器編譯程式時忽略它們。
</p>, <p>Java內建了建立介面的類別，可以這樣使用：
</p>, <p>這段程式碼的意思是任何實現（implement）<code>Deleteable</code>介面的類別都必須實現<code>delete()</code>方法。每個類別對這個方法的實現可以自行客製化。由此概念可以引出很多種使用方法，下面是一個類別的例子：
</p>, <p>在另外一個類別中，可以使用這樣的程式碼：
</p>, <p>因為佇列中所有的物件都可以使用<code>delete()</code>方法。<code>Deleteable</code>佇列中包含<code>Fred</code>物件的參照，而這個類別和其他<code>Deleteable</code>類別在使用<code>deleteAll()</code>方法時候不需要進行任何改變。
</p>, <p>之所以這樣做就是為了在介面的執行和其程式碼之間進行區別。舉例來說，一個名叫<code>Collection</code>的介面可以包含任何物件所需要的引入、轉換和儲存資料的方法，其他的類都可以使用這個介面。但是這個介面可以是一個可重定義大小的佇列、一個<a href="/wiki/%E9%93%BE%E8%A1%A8" title="連結串列">連結串列</a>或者是其他功能的集合。
</p>, <p>這種特性其實是一種折中的辦法。Java的設計者們不想讓Java有<a href="/wiki/%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF" title="多重繼承">多重繼承</a>的特性，因為C++的多重繼承顯示了這種特性的困難。Java的介面功能可以提供同樣的功能，但是又不會很複雜。
</p>, <p>在Java語言中，<a href="/wiki/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3" title="應用程式介面">應用程式介面</a>（API）化身成類別，並且分組成為套件。每個包中包含有相關的介面和類。對於不同的平台，Java提供了不同版本的包。API的設定由sun公司和其他公司通過<a href="/wiki/JCP" title="JCP">JCP</a>（Java社群程式）決定。任何公司和個人都可以參與這個工程，對API進行設計。2004年，<a href="/wiki/IBM" title="IBM">IBM</a>和<a href="/wiki/BEA_Systems" title="BEA Systems">BEA</a>公司準備聯合對官方的Java開源軟體工程進行支援，但是2005年初，sun公司拒絕了這個支援。
</p>, <p>下面這個程式顯示「Hello, world!」然後結束執行，注意<code>java.lang</code>套件是自動載入的，所以不需要在程式之前加入<code>import java.lang.*;</code>
</p>, <p>Java試圖通過新的方式解決軟體編寫的複雜性。很多人認為Java語言做到了它承諾的一切。但是Java並不是一門完美的語言。
</p>, <p>並不是所有的工程和環境需要企業等級的複雜性，比如一個簡單的個人網站或者獨自編程的程式師所寫的程式。這些程式師會發現Java的複雜管理對於自己要做的程式來說過於強大了。一些人覺得Java在物件導向上面做的沒有<a href="/wiki/Ruby" title="Ruby">Ruby</a>和<a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a>純粹。但是最新出現的用Java實現的語言<a href="/wiki/Groovy" title="Groovy">Groovy</a>解決了這些問題。
</p>, <p>作為一種已經建立的新技術，Java顯然綜合了很多語言的特性，比如C++、C語言、<a href="/wiki/Python" title="Python">Python</a>等等。一些對於Java的評論認為Java的不變性在動搖。
</p>, <p>有些程式師不喜歡原始類型（primitive type）和類別（class）的分離，尤其是那些曾經使用過<a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a>和<a href="/wiki/Ruby" title="Ruby">Ruby</a>的程式設計師。Java的<a href="/wiki/%E4%BB%A3%E7%A0%81" title="程式碼">代碼</a>相對於其他的<a href="/wiki/%E4%BB%A3%E7%A0%81" title="程式碼">代碼</a>來說過於冗長，這與它的輕便化聲明相違背。
</p>, <p>Java是一種<a class="new" href="/w/index.php?title=%E5%96%AE%E7%B9%BC%E6%89%BF&amp;action=edit&amp;redlink=1" title="單繼承（頁面不存在）">單繼承</a>的語言。這也導致了程式師在試圖使用<a href="/wiki/%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF" title="多重繼承">多重繼承</a>時候的不便，而很多語言都可以使用這個特性。但是Java可以使用<a class="new" href="/w/index.php?title=%E4%BB%8B%E9%9D%A2%E9%A1%9E&amp;action=edit&amp;redlink=1" title="介面類（頁面不存在）">介面類</a>，把多重繼承可能導致的風險減少到最小。Java不支援<a class="mw-redirect" href="/wiki/%E9%81%8B%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BC%89" title="運算子重載">運算子重載</a>，這是為了防止<a class="mw-redirect" href="/wiki/%E9%81%8B%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BC%89" title="運算子重載">運算子重載</a>使得代碼的功能變得不清晰。但是用Java實現的語言<a href="/wiki/Groovy" title="Groovy">Groovy</a>可以進行<a class="mw-redirect" href="/wiki/%E9%81%8B%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BC%89" title="運算子重載">運算子重載</a>。過去Java對於文字的操作和其他語言，比如<a href="/wiki/Perl" title="Perl">Perl</a>和<a href="/wiki/PHP" title="PHP">PHP</a>相比差的較多，但Java在1.4版本時候引入了<a href="/wiki/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F" title="正規表示式">正規表示式</a>。
</p>, <p>至Java 1.7為止，Java語言不支援閉包（closure）和混入（mixin）特性。
</p>, <p>Java 1.8加入lambda表達式（Lambda Expressions）<sup class="reference" id="cite_ref-22"><a href="#cite_note-22">[18]</a></sup>。
</p>, <p>使用<a href="/wiki/Swing_(Java)" title="Swing (Java)">Swing</a>平臺編寫的帶有<a class="mw-redirect" href="/wiki/%E5%9C%96%E5%BD%A2%E4%BD%BF%E7%94%A8%E8%80%85%E7%95%8C%E9%9D%A2" title="圖形使用者介面">GUI</a>（圖形用戶介面）的程式和其他原始程式非常不同。選用<a href="/wiki/AWT" title="AWT">AWT</a>工具包編寫程式的程式師看到的都是原始介面，而且也無法獲得先進的GUI編程支援，如果使用的話，就要提供每個平臺上面所需的API，這將是一項龐大的工程。Swing則是完全用Java語言所寫的程式，避免了介面元素重複的問題，只使用所有平臺都支援的最基本的繪圖機制。但是很多用戶不知道如何在Java風格和Windows風格之間進行轉換，結果造成了Java程式的介面在很多程式中非常特殊。<a href="/wiki/%E8%98%8B%E6%9E%9C%E5%85%AC%E5%8F%B8" title="蘋果公司">蘋果電腦</a>已經提供了最佳化過的Java運行時程式，包含了<a class="mw-redirect" href="/wiki/Mac_OS_X" title="Mac OS X">Mac OS X</a>的經典<a href="/wiki/Aqua_(GUI)" title="Aqua (GUI)">Aqua</a>介面風格。
</p>, <p>在IBM捐贈給Eclipse基金會的SWT介面框架中，用戶會看到熟悉的本地風格介面。但這又引起了不同喜好的開發人員之間的爭論。
</p>, <p>由於Java編譯器和虛擬機的不同對Java代碼的效能影響比語言本身的影響大的多，所以統一討論Java的程式的效能經常是有誤導性的。據IBM的資料，在同樣的硬體上2001年時的<a href="/wiki/IBM" title="IBM">IBM</a> <a href="/wiki/JDK" title="JDK">JDK</a>版本的效能是1996年的JDK版本的十倍左右。<sup class="reference" id="cite_ref-23"><a href="#cite_note-23">[19]</a></sup>而即使是在同一時期，不同公司的JDK和<a href="/wiki/JRE" title="JRE">JRE</a>的效能也不一樣，比如SUN、IBM、<a href="/wiki/BEA_Systems" title="BEA Systems">BEA</a>等公司都有自己開發的JDK和<a href="/wiki/JRE" title="JRE">JRE</a>。
</p>, <p>Java語言的一些特性不可避免的有額外的效能代價，例如陣列範圍檢查、運行時類型檢查等等。Java程式的效能還會因為不同的動態複雜性和垃圾處理機制使用的多少而各有不同。如果JVM的實現比較最佳化的話，那麼這些功能甚至可以增加記憶體分配的效能。這和總是使用STL或者代管C++的程式的情況類似。
</p>, <p>儘管如此，仍然有許多人認為Java的效能低。這部分歸因於Sun公司最初的JVM實現使用未最佳化的解釋機制來執行位元組碼。一些新版本的JVM使用Just-In-Time（<a class="mw-redirect" href="/wiki/JIT" title="JIT">JIT</a>）編譯器，在載入位元組碼的時候將其編譯成針對運行環境的本地代碼來實現一些本地編譯器的最佳化特性。Just-In-Time機制和本地編譯的效能比較仍舊是一個有爭議的話題。JIT編譯需要很多時間，對於運行時間不長或者代碼很多的大型程式並不適宜。但是不算JIT編譯階段的話，程式的運行效能在很多<a class="mw-redirect" href="/wiki/JVM" title="JVM">JVM</a>下可以和本地編譯的程式一爭短長，甚至在一些計算比較密集的數值計算領域也是這樣。目前，Java已經使用更先進的<a class="mw-redirect" href="/wiki/HotSpot_(java)" title="HotSpot (java)">HotSpot</a>技術來代替JIT技術，Java的效能有了更進一步的提升。另外，在使用-server選項運行Java程式時，也可以對Java進行更深入的最佳化，比如在運行時將調用較多的方法內聯（inline）到程式中來提高運行速度，這就是所謂的「動態最佳化」，而本地編譯器是無法做到這一點的；這也是一些Java代碼比對應用C/C++等語言編寫的本地代碼運行的更快的原因之一。微軟的.NET平臺也使用JIT編譯器，所以也有類似問題。
</p>, <p>Java的設計目的主要是安全性和可攜性，所以對於一些特性，比如對硬體架構和記憶體位址存取的直接存取都被去除了。如果需要間接調用這些底層功能的話，就需要使用<a class="mw-redirect" href="/wiki/JNI" title="JNI">JNI</a>（Java本地介面）來調用本地代碼，而間接存取意味著頻繁調用這些特性時效能損失會很大，微軟的.NET平臺也有這樣的問題。所以到目前為止，效能敏感的代碼，例如驅動程式和3D電子遊戲，還是大多使用本地編譯，甚至直接以不直接支援物件導向的C語言或機器碼編寫。但最近已經有了許多用純Java編寫的3D遊戲，其效果與用C語言編寫的不相上下，例如「<a href="/wiki/Chrome_(%E6%B8%B8%E6%88%8F)" title="Chrome (遊戲)">合金戰士</a>」（英文名：Chrome）。這主要是因為新版的Java 3D技術已經能像C++一樣調用硬體加速，也就是使用<a class="mw-redirect" href="/wiki/%E9%A1%AF%E7%A4%BA%E5%8D%A1" title="顯示卡">顯示卡</a>來加速，無論是C++還是Java語言寫的3D遊戲都是使用顯示卡及<a class="mw-redirect" href="/wiki/GPU" title="GPU">GPU</a>來處理，從而使得<a class="mw-redirect" href="/wiki/%E4%B8%AD%E5%A4%AE%E8%99%95%E7%90%86%E5%99%A8" title="中央處理器">CPU</a>可以專注於其他方面的工作。
</p>, <p>1.桌面GUI應用程式：
Java通過抽象窗口工具包（AWT），Swing和JavaFX等多種方式提供GUI開發。雖然AWT包含許多預先構建的組件，如選單，按鈕，列表以及眾多第三方組件，但Swing（一個GUI小部件工具包）還提供某些進階組件，如樹，表格，捲動窗格，索引標籤式面板和列表。JavaFX是一組圖形和媒體包，提供了Swing互操作性，3D圖形功能和自包含的部署模型，可以快速編寫Java小應用程式和應用程式的指令碼。<sup class="reference" id="cite_ref-24"><a href="#cite_note-24">[20]</a></sup>
</p>, <p>2.行動應用程式：
Java Platform，Micro Edition（Java ME或J2ME）是一個跨平台框架，用於構建可在所有Java支援的裝置（包括功能型手機和智慧型手機）上執行的應用程式。此外，最受歡迎的行動作業系統之一的Android應用程式通常使用Android軟體開發套件（SDK）或其他環境在Java中編寫指令碼。
</p>, <p>3.嵌入式系統：
從微型晶片到專用電腦的嵌入式系統是執行專門任務的大型電腦電系統的組件。諸如SIM卡，藍光光碟播放器，公用事業儀表和電視機等多種裝置都使用嵌入式Java技術。據甲骨文公司稱，100％的藍光光碟播放器和1.25億台電視裝置都採用Java技術。
</p>, <p>4. Web應用程式：
Java通過Servlets，Struts或JSP提供對Web應用程式的支援。程式語言提供的簡單程式設計和更高的安全性使得大量政府應用程式可用於基於Java的健康，社會安全，教育和保險。Java也可以使用Broadleaf等開源電子商務平台開發電子商務Web應用程式。
</p>, <p>5. Web伺服器和應用程式伺服器：
今天的Java生態系統包含多個Java Web伺服器和應用程式伺服器。雖然Apache Tomcat，Simple，Jo !, Rimfaxe Web伺服器（RWS）和Project Jigsaw占據了Web伺服器空間，但WebLogic，WebSphere和Jboss EAP在商業應用伺服器領域占據重要地位<sup class="reference" id="cite_ref-25"><a href="#cite_note-25">[21]</a></sup>。
</p>, <p>6.企業應用程式：
Java企業版（Java EE）是一種流行的平台，為指令碼和執行企業軟體（包括網路應用程式和Web服務）提供API和執行時環境。甲骨文宣稱Java在97％的企業電腦上執行。Java中更高的效能保證和更快的計算能力導致像Murex這樣的高頻交易系統被編入指令碼中。它也是各種銀行應用程式的中樞，它們將Java從前端用戶端執行到後端伺服器端。
</p>, <p>7.科學應用：
Java是許多軟體開發人員用於編寫涉及科學計算和數學運算的應用程式的選擇。這些程式通常被認為是快速和安全的，具有更高的可攜式性和低維護性。像MATLAB這樣的應用程式使用Java來互動使用者介面和作為核心系統的一部分。
</p>, <p class="mw-empty-elt">
</p>, <p class="mw-empty-elt">
</p>]