[<p><b><span dir="ltr" lang="zh-tw">操</span>作系統</b>（英語：<span lang="en"><b>O</b>perating <b>S</b>ystem</span>，縮寫：<span lang="en"><b>OS</b></span>）是管理<a class="mw-redirect" href="/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA" title="電腦">電腦</a><a href="/wiki/%E7%A1%AC%E4%BB%B6" title="硬體">硬體</a>與<a href="/wiki/%E8%BD%AF%E4%BB%B6" title="軟體">軟體</a>資源的<a href="/wiki/%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6" title="系統軟體">系統軟體</a>，同時也是電腦系統的核心與基石。作業系統需要處理如管理與組態<a class="mw-redirect" href="/wiki/%E5%86%85%E5%AD%98" title="記憶體">記憶體</a>、決定系統資源供需的優先次序、控制輸入與輸出裝置、操作<a href="/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C" title="電腦網路">網路</a>與管理<a href="/wiki/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F" title="檔案系統">檔案系統</a>等基本事務。作業系統也提供一個讓使用者與系統互動的操作介面。
</p>, <p>作業系統的型態非常多樣，不同機器安裝的作業系統可從簡單到複雜，可從<a href="/wiki/%E7%A7%BB%E5%8A%A8%E7%94%B5%E8%AF%9D" title="行動電話">行動電話</a>的<a href="/wiki/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F" title="嵌入式系統">嵌入式系統</a>到<a href="/wiki/%E8%B6%85%E7%BA%A7%E8%AE%A1%E7%AE%97%E6%9C%BA" title="超級電腦">超級電腦</a>的<a href="/wiki/%E8%B6%85%E7%BA%A7%E8%AE%A1%E7%AE%97%E6%9C%BA#.E6.93.8D.E4.BD.9C.E7.B3.BB.E7.BB.9F" title="超級電腦">大型作業系統</a>。許多作業系統製造者對它涵蓋範疇的定義也不盡一致，例如有些作業系統整合了<a href="/wiki/%E5%9B%BE%E5%BD%A2%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2" title="圖形化使用者介面">圖形化使用者介面</a>，而有些僅使用<a href="/wiki/%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%95%8C%E9%9D%A2" title="命令行介面">命令行介面</a>，而將圖形化使用者介面視為一種非必要的應用程式。
</p>, <p>作業系統理論在<a href="/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6" title="電腦科學">電腦科學</a>中，為歷史悠久<mark class="template-facttext" title="需要提供文獻來源">而又活躍</mark><sup class="noprint Template-Fact"><a href="/wiki/Wikipedia:%E5%88%97%E6%98%8E%E6%9D%A5%E6%BA%90" title="Wikipedia:列明來源"><span style="white-space: nowrap;" title="來源請求開始於2017年12月13日。">[來源請求]</span></a></sup>的分支；<mark class="template-facttext" title="需要提供文獻來源">而作業系統的設計與實現則是軟體工業的基礎與核心</mark><sup class="noprint Template-Fact"><a href="/wiki/Wikipedia:%E5%88%97%E6%98%8E%E6%9D%A5%E6%BA%90" title="Wikipedia:列明來源"><span style="white-space: nowrap;" title="來源請求開始於2017年12月13日。">[來源請求]</span></a></sup>。
</p>, <p>綜觀電腦之歷史，作業系統與電腦硬體的發展息息相關。作業系統之本意原為提供簡單的<a href="/wiki/%E6%8E%92%E7%A8%8B" title="排程">工作排序</a>能力，後為輔助更新更複雜的硬體設施而漸漸演化。從最早的<a href="/wiki/%E6%89%B9%E5%A4%84%E7%90%86%E4%BB%BB%E5%8A%A1" title="批次處理任務">批次模式</a>開始，<a href="/wiki/%E5%88%86%E6%99%82%E7%B3%BB%E7%B5%B1" title="分時系統">分時機制</a>也隨之出現，在<a class="mw-redirect" href="/wiki/%E5%A4%9A%E8%99%95%E7%90%86%E5%99%A8" title="多處理器">多處理器</a>時代來臨時，作業系統也隨之添加多處理器協調功能，甚至是<a href="/wiki/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97" title="分散式計算">分散式系統</a>的協調功能。其他方面的演變也類似於此。另一方面，在個人電腦上，個人電腦之作業系統因襲大型電腦的成長之路，在硬體越來越複雜、強大時，也逐步實踐以往衹有大型電腦才有的功能。
</p>, <p>總而言之，作業系統的歷史就是一部解決電腦系統需求與問題的歷史。
</p>, <p>第一部電腦並沒有作業系統。這是由於早期電腦的建立方式（如同建造機械<a href="/wiki/%E7%AE%97%E7%9B%98" title="算盤">算盤</a>）與效能不足以執行如此程式。但在1947年發明了<a href="/wiki/%E6%99%B6%E4%BD%93%E7%AE%A1" title="電晶體">電晶體</a>，以及<a href="/wiki/%E8%8E%AB%E9%87%8C%E6%96%AF%C2%B7%E5%A8%81%E5%B0%94%E5%85%8B%E6%96%AF" title="莫里斯·威爾克斯">莫里斯·威爾克斯</a>發明的<a href="/wiki/%E5%BE%AE%E7%A8%8B%E5%BA%8F" title="微程式">微程式</a>方法，使得電腦不再是機械裝置，而是電子產品。系統管理工具以及簡化硬體操作流程的程式很快就出現了，且成為作業系統的起源。到了1960年代早期，商用電腦製造商製造了<a href="/wiki/%E6%89%B9%E5%A4%84%E7%90%86%E4%BB%BB%E5%8A%A1" title="批次處理任務">批次處理</a>系統，此系統可將工作的建置、排程以及執行<a href="/wiki/%E5%BA%8F%E5%88%97%E5%8C%96" title="序列化">序列化</a>。此時，廠商為每一台不同型號的電腦創造不同的作業系統，因此為某電腦而寫的程式無法移植到其他電腦上執行，即使是同型號的電腦也不行。
</p>, <p>到了1964年，<a href="/wiki/IBM_System/360" title="IBM System/360">IBM System/360</a>推出了一系列用途與價位都不同的<a class="mw-redirect" href="/wiki/%E5%A4%A7%E5%9E%8B%E6%9C%BA" title="大型電腦">大型電腦</a>，而它們都共享代號為<a class="new" href="/w/index.php?title=OS/360&amp;action=edit&amp;redlink=1" title="OS/360（頁面不存在）">OS/360</a>的作業系統（而非每種產品都用量身訂做的作業系統）。讓單一作業系統適用於整個系列的產品是System/360成功的關鍵，且實際上IBM目前的大型系統便是此系統的後裔，為System/360所寫的應用程式依然可以在現代的IBM機器上執行。
</p>, <p>OS/360也包含另一個優點：永久貯存裝置—<a href="/wiki/%E7%A1%AC%E7%9B%98" title="硬碟">硬碟</a>的面世（IBM稱為<a class="new" href="/w/index.php?title=%E7%9B%B4%E6%8E%A5%E5%AD%98%E5%8F%96%E5%82%A8%E5%AD%98%E8%A3%85%E7%BD%AE&amp;action=edit&amp;redlink=1" title="直接存取儲存裝置（頁面不存在）">DASD</a>）。另一個關鍵是<a href="/wiki/%E5%88%86%E6%99%82%E7%B3%BB%E7%B5%B1" title="分時系統">分時</a>概念的建立：將大型電腦珍貴的時間資源適當分配到所有使用者身上。分時也讓使用者有獨佔整部機器的感覺；而<a href="/wiki/Multics" title="Multics">Multics</a>的分時系統是此時眾多新作業系統中實踐此觀念最成功的。
</p>, <p>1963年，<a href="/wiki/%E9%80%9A%E7%94%A8%E7%94%B5%E6%B0%94" title="奇異">奇異公司</a>與<a href="/wiki/%E8%B4%9D%E5%B0%94%E5%AE%9E%E9%AA%8C%E5%AE%A4" title="貝爾實驗室">貝爾實驗室</a>合作以PL/I語言建立的<a href="/wiki/Multics" title="Multics">Multics</a><sup class="reference" id="cite_ref-1"><a href="#cite_note-1">[1]</a></sup>，是激發1970年代眾多作業系統建立的靈感來源，尤其是由<a class="mw-redirect" href="/wiki/%E7%BE%8E%E5%9B%BD%E7%94%B5%E8%AF%9D%E7%94%B5%E6%8A%A5%E5%85%AC%E5%8F%B8" title="美國電話電報公司">AT&amp;T</a>貝爾實驗室的<a href="/wiki/%E4%B8%B9%E5%B0%BC%E6%96%AF%C2%B7%E9%87%8C%E5%A5%87" title="丹尼斯·里奇">丹尼斯·里奇</a>與<a href="/wiki/%E8%82%AF%C2%B7%E6%B1%A4%E6%99%AE%E9%80%8A" title="肯·湯普遜">肯·湯普遜</a>所建立的<a href="/wiki/UNIX" title="UNIX">Unix</a>系統，為了實踐平台移植能力，此作業系統在1973年由<a href="/wiki/C%E8%AF%AD%E8%A8%80" title="C語言">C語言</a>重寫；另一個廣為市場採用的<a href="/wiki/%E5%BE%AE%E5%9E%8B%E8%AE%A1%E7%AE%97%E6%9C%BA" title="微型電腦">小型電腦</a>作業系統是<a href="/wiki/OpenVMS" title="OpenVMS">VMS</a>。
</p>, <p>第一代<a href="/wiki/%E5%BE%AE%E5%9E%8B%E8%AE%A1%E7%AE%97%E6%9C%BA" title="微型電腦">微型電腦</a>並不像大型電腦或小型電腦，沒有裝設作業系統的需求或能力；它們只需要最基本的作業系統，通常這種作業系統都是從<a href="/wiki/%E5%94%AF%E8%AE%80%E8%A8%98%E6%86%B6%E9%AB%94" title="唯讀記憶體">ROM</a>讀取的，此種程式被稱為監視程式（Monitor）。1980年代，家用電腦開始普及。通常此時的電腦擁有8-bit處理器加上64KB<a href="/wiki/%E9%9B%BB%E8%85%A6%E8%A8%98%E6%86%B6%E9%AB%94" title="電腦記憶體">記憶體</a>、<a href="/wiki/%E6%98%BE%E7%A4%BA%E5%99%A8" title="螢幕">螢幕</a>、<a class="mw-redirect" href="/wiki/%E9%94%AE%E7%9B%98" title="鍵盤">鍵盤</a>以及低音質<a href="/wiki/%E6%8F%9A%E8%81%B2%E5%99%A8" title="揚聲器">喇叭</a>。而80年代早期最著名的套裝電腦為使用微處理器6510（6502晶片特別版）的<a class="mw-redirect" href="/wiki/Commodore_64" title="Commodore 64">Commodore C64</a>。此電腦沒有作業系統，而是以一8KB唯讀記憶體<a href="/wiki/BIOS" title="BIOS">BIOS</a>初始化彩色螢幕、鍵盤以及軟碟機和印表機。它可用8KB唯讀記憶體<a href="/wiki/BASIC" title="BASIC">BASIC</a>語言來直接操作BIOS，並依此撰寫程式，大部分是遊戲。此BASIC語言的<a href="/wiki/%E7%9B%B4%E8%AD%AF%E5%99%A8" title="直譯器">直譯器</a>勉強可算是此電腦的作業系統，當然就沒有<a href="/wiki/%E5%86%85%E6%A0%B8" title="核心">核心</a>或軟硬體保護機制了。此電腦上的遊戲大多跳過BIOS層次，直接控制硬體。
</p>, <p>早期最著名的磁碟啟動型作業系統是<a href="/wiki/CP/M" title="CP/M">CP/M</a>，它支援許多早期的微電腦。最早期的IBM PC其架構類似C64。當然它們也使用了BIOS以初始化與抽象化硬體的操作，甚至也附了一個BASIC直譯器！但是它的BASIC優於其他公司產品的原因在於他有可攜性，並且相容於任何符合IBM PC架構的機器上。這樣的PC可利用<a href="/wiki/Intel_8088" title="Intel 8088">Intel-8088處理器</a>（16-bit暫存器）定址，並最多可有1MB的記憶體，然而最初只有640KB。<a href="/wiki/%E8%BD%AF%E7%9B%98" title="軟碟">軟式磁碟機</a>取代了過去的磁帶機，成為新一代的儲存裝置，並可在他512KB的空間上讀寫。為了支援更進一步的檔案讀寫概念，<a href="/wiki/DOS" title="DOS">磁碟作業系統</a>（Disk Operating System，DOS）因而誕生。此作業系統可以合併任意數量的磁區，因此可以在一張磁碟片上放置任意數量與大小的檔案。檔案之間以檔名區別。IBM並沒有很在意其上的DOS，因此以向外部公司購買的方式取得作業系統。1980年微軟公司取得了與IBM的合約，並且收購了一家公司出產的作業系統，在將之修改後以<a href="/wiki/MS-DOS" title="MS-DOS">MS-DOS</a>的名義出品，此作業系統可以直接讓程式操作BIOS與檔案系統。到了<a href="/wiki/Intel_80286" title="Intel 80286">Intel-80286處理器</a>的時代，才開始實作基本的儲存裝置保護措施。其後，MS-DOS成爲了<a href="/wiki/%E4%B8%AA%E4%BA%BA%E7%94%B5%E8%84%91" title="個人電腦">IBM PC</a>上面最常用的作業系統（IBM自己也有推出DOS，稱為IBM-DOS或<a href="/wiki/PC-DOS" title="PC-DOS">PC-DOS</a>）。MS-DOS的成功使得<a href="/wiki/%E5%BE%AE%E8%BD%AF" title="微軟">微軟</a>成為地球上最賺錢的公司之一。
</p>, <p>而1980年代另一個崛起的作業系統異數是<a class="mw-redirect" href="/wiki/Mac_OS" title="Mac OS">Mac OS</a>，此作業系統緊緊與<a class="mw-redirect" href="/wiki/%E9%BA%A6%E9%87%91%E5%A1%94%E7%94%B5%E8%84%91" title="麥金塔電腦">麥金塔電腦</a>綑綁在一起。此時一位<a href="/wiki/%E6%96%BD%E4%B9%90" title="全錄">全錄</a><a href="/wiki/%E5%B8%95%E7%BE%85%E5%A5%A7%E5%A4%9A%E7%A0%94%E7%A9%B6%E4%B8%AD%E5%BF%83" title="帕羅奧多研究中心">帕羅奧多研究中心</a>的員工Dominik Hagen拜訪(Visits)了蘋果電腦的<a href="/wiki/%E5%8F%B2%E8%92%82%E5%A4%AB%C2%B7%E4%B9%94%E5%B8%83%E6%96%AF" title="史蒂夫·賈伯斯">史蒂夫·賈伯斯</a>，並且向他展示了此時全錄發展的圖形化使用者介面。蘋果電腦驚為天人，並打算向全錄購買此技術，但因帕羅奧多研究中心並非商業單位而是研究單位，因此全錄回絕了這項買賣。在此之後蘋果一致認為個人電腦的未來必定屬於圖形使用者介面，因此也開始發展自己的圖形化作業系統。
</p>, <p>延續1980年代的競爭，1990年代出現了許多影響未來個人電腦市場深厚的作業系統。由於圖形化使用者介面日趨繁複，作業系統的能力也越來越複雜與巨大，因此強韌且具有彈性的作業系統就成了迫切的需求。此年代是許多套裝類的<a href="/wiki/%E4%B8%AA%E4%BA%BA%E7%94%B5%E8%84%91" title="個人電腦">個人電腦</a>作業系統互相競爭的時代。
</p>, <p>上一年代於市場崛起的蘋果電腦，由於舊系統的設計不良，使得其後繼發展不力，蘋果電腦決定重新設計作業系統。經過許多失敗的專案後，蘋果於1997年釋出新作業系統——<a class="mw-redirect" href="/wiki/Mac_OS_X" title="Mac OS X">Mac OS X</a>的測試版，而後推出的正式版取得了巨大的成功。讓原先失意離開蘋果的<a href="/wiki/%E5%8F%B2%E8%92%82%E5%A4%AB%C2%B7%E4%B9%94%E5%B8%83%E6%96%AF" title="史蒂夫·賈伯斯">史蒂夫·賈伯斯</a>風光再現。
</p>, <p>除了商業主流的作業系統外，從1980年代起在<a href="/wiki/%E5%BC%80%E6%94%BE%E6%BA%90%E4%BB%A3%E7%A0%81" title="開放原始碼">開放原始碼</a>的世界中，<a href="/wiki/BSD" title="BSD">BSD</a>系統也發展了非常久的一段時間，但在1990年代由於<a href="/wiki/BSD#Net/2以及法律问题" title="BSD">與AT&amp;T的法律爭端</a>，使得遠在<a href="/wiki/%E8%8A%AC%E5%85%B0" title="芬蘭">芬蘭</a><a href="/wiki/%E8%B5%AB%E5%B0%94%E8%BE%9B%E5%9F%BA%E5%A4%A7%E5%AD%A6" title="赫爾辛基大學">赫爾辛基大學</a>的另一股開源作業系統——<a href="/wiki/Linux" title="Linux">Linux</a>興起。Linux核心是一個標準<a class="mw-redirect" href="/wiki/POSIX" title="POSIX">POSIX</a>核心，其血緣可算是Unix家族的一支。Linux與BSD家族都搭配<a href="/wiki/GNU" title="GNU">GNU計畫</a>所發展的應用程式，但是由於使用的<a class="mw-disambig" href="/wiki/%E8%AE%B8%E5%8F%AF%E8%AF%81" title="許可證">許可證</a>以及歷史因素的作弄下，Linux取得了相當可觀的開源作業系統市佔率，而BSD則小得多。相較於MS-DOS的架構，Linux除了擁有傲人的<a href="/wiki/Linux%E5%86%85%E6%A0%B8#可移植性" title="Linux核心">可移植性</a>（相較於Linux，MS-DOS衹能運行在Intel CPU上），它也是一個分時<a class="new" href="/w/index.php?title=%E5%A4%9A%E8%A1%8C%E7%A8%8B&amp;action=edit&amp;redlink=1" title="多行程（頁面不存在）">多行程</a>核心，以及良好的<a class="new" href="/w/index.php?title=%E8%A8%98%E6%86%B6%E9%AB%94%E7%A9%BA%E9%96%93&amp;action=edit&amp;redlink=1" title="記憶體空間（頁面不存在）">記憶體空間</a>管理（普通的行程不能存取核心區域的記憶體）。想要存取任何非自己的記憶體空間的行程衹能透過<a href="/wiki/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8" title="系統呼叫">系統呼叫</a>來達成。一般行程是處於使用者模式（User mode）底下，而執行系統呼叫時會被切換成核心模式（Kernel mode），所有的特殊指令衹能在核心模式執行，此措施讓核心可以完美管理系統內部與外部裝置，並且拒絕無權限的行程提出的請求。因此理論上任何應用程式執行時的錯誤，都不可能讓系統<a class="mw-disambig" href="/wiki/%E6%AD%BB%E6%9C%BA" title="當機">當機</a>。
</p>, <p>另一方面，微軟對於更強力的作業系統呼聲的回應便是<a href="/wiki/Windows_NT" title="Windows NT">Windows NT</a>於1993年的面世。
</p>, <p>1983年開始微軟就想要為MS-DOS建構一個圖形化的作業系統應用程式，稱為Windows（有人說這是<a href="/wiki/%E6%AF%94%E5%B0%94%C2%B7%E7%9B%96%E8%8C%A8" title="比爾·蓋茲">比爾·蓋茲</a>被蘋果的Lisa電腦上市所刺激）。一開始Windows並不是一個作業系統，只是一個應用程式，其背景還是純MS-DOS系統，這是因為當時的BIOS設計以及MS-DOS的架構不甚良好之故。在1990年代初，微軟與IBM的合作破裂，微軟從<a href="/wiki/OS/2" title="OS/2">OS/2</a>（早期為命令列模式，後來成為一個技術很優秀但是曲高和寡的圖形化作業系統）專案中抽身，並且在1993年7月27日推出<a href="/wiki/Windows_NT" title="Windows NT">Windows 3.1</a>，一個以OS/2為基礎的圖形化作業系統。並在1995年8月15日推出<a href="/wiki/Windows_95" title="Windows 95">Windows 95</a>。這時的Windows系統依然是建立在MS-DOS的基礎上，不過微軟在這同時也在開發不依賴於DOS的NT系列Windows系統，並在後來完全放棄了DOS而轉向NT作為Windows的基礎。
</p>, <p>底下的表格為Windows NT系統的架構：在硬體階層之上，有一個由微核心直接接觸的<a href="/wiki/%E7%A1%AC%E9%AB%94%E6%8A%BD%E8%B1%A1%E5%B1%A4" title="硬體抽象層">硬體抽象層</a>（HAL），而不同的驅動程式以模組的形式掛載在核心上執行。因此微核心可以使用諸如輸入輸出、檔案系統、網路、資訊安全機制與虛擬記憶體等功能。而系統服務層提供所有統一規格的函式呼叫庫，可以統一所有子系統的實作方法。例如儘管POSIX與OS/2對於同一件服務的名稱與呼叫方法差異甚大，它們一樣可以無礙地實作於系統服務層上。在系統服務層之上的子系統，全都是使用者模式，因此可以避免使用者程式執行非法行動。
</p>, <p>子系統架構第一個實作的子系統群當然是以前的微軟系統。DOS子系統將每個DOS程式當成一行程執行，並以個別獨立的MS-DOS虛擬機器承載其<a href="/wiki/%E5%9F%B7%E8%A1%8C%E6%9C%9F" title="執行期">運行環境</a>。另外一個是Windows 3.1類比系統，實際上是在Win32子系統下執行Win16程式。因此達到了安全掌控為MS-DOS與早期Windows系統所撰寫之舊版程式的能力。然而此架構只在<a href="/wiki/Intel_80386" title="Intel 80386">Intel 80386</a>處理器及後繼機型上實作。且某些會直接讀取硬體的程式，例如大部分的Win16遊戲，就無法套用這套系統，因此很多早期遊戲便無法在Windows NT上執行。Windows NT有3.1、3.5、3.51與4.0版。Windows 2000是Windows NT的改進系列（事實上是Windows NT 5.0）、<a href="/wiki/Windows_XP" title="Windows XP">Windows XP</a>（Windows NT 5.1）以及<a href="/wiki/Windows_Server_2003" title="Windows Server 2003">Windows Server 2003</a>（Windows NT 5.2）與<a href="/wiki/Windows_Vista" title="Windows Vista">Windows Vista</a>（Windows NT 6.0）也都是立基於Windows NT的架構上。
</p>, <p>而本年代漸漸增長並越趨複雜的嵌入式裝置市場也促使<a href="/wiki/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F" title="嵌入式作業系統">嵌入式作業系統</a>的成長。
</p>, <p>現代作業系統通常都有一個使用的繪圖裝置的<a href="/wiki/%E5%9B%BE%E5%BD%A2%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2" title="圖形化使用者介面">圖形化使用者介面</a>（GUI），並附加如滑鼠或觸控面版等有別於鍵盤的輸入裝置。舊的OS或效能導向的伺服器通常不會有如此親切的介面，而是以<a href="/wiki/%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%95%8C%E9%9D%A2" title="命令行介面">命令行介面</a>（CLI）加上鍵盤為輸入裝置。以上兩種介面其實都是所謂的<a class="mw-disambig" href="/wiki/%E6%AE%BC" title="殼">殼</a>，其功能為接受並處理使用者的指令（例如按下一按鈕，或在命令提示列上鍵入指令）。
</p>, <p>選擇要安裝的作業系統通常與其硬體架構有很大關係，只有<a href="/wiki/Linux" title="Linux">Linux</a>與<a href="/wiki/BSD" title="BSD">BSD</a>幾乎可在所有硬體架構上執行，而Windows NT僅移植到了<a href="/wiki/DEC_Alpha" title="DEC Alpha">DEC Alpha</a>與<a class="new" href="/w/index.php?title=MIPS_Magnum&amp;action=edit&amp;redlink=1" title="MIPS Magnum（頁面不存在）">MIPS Magnum</a>。在1990年代早期，個人電腦的選擇就已被侷限在<a href="/wiki/Microsoft_Windows" title="Microsoft Windows">Windows</a>家族、<a class="mw-redirect" href="/wiki/%E7%B1%BBUnix" title="類Unix">類Unix</a>家族以及Linux上，而以Linux及Mac OS X為最主要的另類選擇，直至今日。
</p>, <p><a class="mw-redirect" href="/wiki/%E5%A4%A7%E5%9E%8B%E6%9C%BA" title="大型電腦">大型機</a>與<a href="/wiki/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F" title="嵌入式系統">嵌入式系統</a>使用很多樣化的作業系統。大型主機近期有許多開始支援<a href="/wiki/Java" title="Java">Java</a>及Linux以便共享其他平台的資源。嵌入式系統近期百家爭鳴，從給<a class="new" href="/w/index.php?title=Sensor_Networks&amp;action=edit&amp;redlink=1" title="Sensor Networks（頁面不存在）">Sensor Networks</a>用的<a class="new" href="/w/index.php?title=Berkeley_Tiny_OS&amp;action=edit&amp;redlink=1" title="Berkeley Tiny OS（頁面不存在）">Berkeley Tiny OS</a>到可以操作<a href="/wiki/Microsoft_Office" title="Microsoft Office">Microsoft Office</a>的<a class="mw-redirect" href="/wiki/Windows_CE" title="Windows CE">Windows CE</a>都有。
</p>, <p>個人電腦市場目前分為兩大陣營，此兩種架構分別有支援的作業系統：
</p>, <p>最早的作業系統是針對20世紀60年代的大型主結構開發的，由於對這些系統在軟體方面做了巨大投資，因此原來的電腦廠商繼續開發與原來作業系統相容的硬體與作業系統。這些早期的作業系統是現代作業系統的先驅。現在仍被支援的大型主機作業系統包括：
</p>, <p>現代的大型主機一般也可執行Linux或Unix變種。
</p>, <p>嵌入式系統使用非常廣泛的系統（如<a href="/wiki/VxWorks" title="VxWorks">VxWorks</a>、<a href="/wiki/ECOS" title="ECOS">eCos</a>、<a class="mw-redirect" href="/wiki/Symbian_OS" title="Symbian OS">Symbian OS</a>及<a href="/wiki/Palm_OS" title="Palm OS">Palm OS</a>）以及某些功能縮減版本的Linux或者其他作業系統。某些情況下，OS指稱的是一個內建了固定應用軟體的巨大泛用程式。在許多最簡單的嵌入式系統中，所謂的OS就是指其上唯一的應用程式。
</p>, <p>所謂的<b>類Unix</b>家族指的是一族種類繁多的OS，此族包含了<a class="mw-redirect" href="/wiki/System_V" title="System V">System V</a>、<a href="/wiki/BSD" title="BSD">BSD</a>與<a href="/wiki/Linux" title="Linux">Linux</a>。由於Unix是<a class="mw-redirect" href="/wiki/The_Open_Group" title="The Open Group">The Open Group</a>的註冊商標，特指遵守此公司定義的行為的作業系統。而類Unix通常指的是比原先的Unix包含更多特徵的OS。
</p>, <p>類Unix系統可在非常多的處理器架構下執行，在<a href="/wiki/%E6%9C%8D%E5%8A%A1%E5%99%A8" title="伺服器">伺服器</a>系統上有很高的使用率，例如大專院校或工程應用的<a href="/wiki/%E5%B7%A5%E4%BD%9C%E7%AB%99" title="工作站">工作站</a>。
</p>, <p>1991年，芬蘭學生<a href="/wiki/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%89%98%E7%93%A6%E5%85%B9" title="林納斯·托瓦茲">林納斯·托瓦茲</a>根據類Unix系統<a class="mw-redirect" href="/wiki/Minix" title="Minix">Minix</a>編寫並發布了<a href="/wiki/Linux" title="Linux">Linux</a>作業系統核心，其後在<a href="/wiki/%E7%90%86%E6%9F%A5%E5%BE%B7%C2%B7%E6%96%AF%E6%89%98%E6%9B%BC" title="理察·斯托曼">理察·斯托曼</a>的建議下以<a href="/wiki/GNU%E9%80%9A%E7%94%A8%E5%85%AC%E5%85%B1%E8%AE%B8%E5%8F%AF%E8%AF%81" title="GNU通用公共許可證">GNU通用公共許可證</a>發布，成為<a href="/wiki/%E8%87%AA%E7%94%B1%E8%BD%AF%E4%BB%B6" title="自由軟體">自由軟體</a>Unix變種. Linux近來越來越受歡迎，它們也在個人桌面電腦市場上大有斬獲，例如<a href="/wiki/Ubuntu" title="Ubuntu">Ubuntu</a>系統。
</p>, <p>某些Unix變種，例如<a href="/wiki/%E6%83%A0%E6%99%AE" title="惠普">惠普</a>的<a href="/wiki/HP-UX" title="HP-UX">HP-UX</a>以及IBM的<a class="mw-redirect" href="/wiki/AIX" title="AIX">AIX</a>僅設計用於自家的硬體產品上，而<a class="mw-redirect" href="/wiki/%E6%98%87%E9%99%BD" title="昇陽">SUN</a>的<a href="/wiki/Solaris" title="Solaris">Solaris</a>可安裝於自家的硬體或<a href="/wiki/X86" title="X86">x86</a>電腦上。蘋果電腦的<a class="mw-redirect" href="/wiki/Mac_OS_X" title="Mac OS X">Mac OS X</a>是一個從<a class="mw-redirect" href="/wiki/NEXTSTEP" title="NEXTSTEP">NeXTSTEP</a>、<a href="/wiki/Mach" title="Mach">Mach</a>以及<a href="/wiki/FreeBSD" title="FreeBSD">FreeBSD</a>共同衍生出來的微核心BSD系統，此OS取代了蘋果電腦早期非Unix家族的Mac OS。
</p>, <p>經歷數年的披荊斬棘，自由<a href="/wiki/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6" title="開源軟體">開源</a>的Linux系統逐漸蠶食以往專利軟體的專業領域，例如以往電腦動畫運算巨擘──<a href="/wiki/%E7%A1%85%E8%B0%B7%E5%9B%BE%E5%BD%A2%E5%85%AC%E5%8F%B8" title="矽谷圖形公司">矽谷圖形公司</a>（SGI）的<a href="/wiki/IRIX" title="IRIX">IRIX</a>系統已被Linux家族及<a href="/wiki/%E8%B4%9D%E5%B0%94%E5%AE%9E%E9%AA%8C%E5%AE%A4" title="貝爾實驗室">貝爾實驗室</a>研發小組設計的<a href="/wiki/%E8%B2%9D%E7%88%BE%E5%AF%A6%E9%A9%97%E5%AE%A4%E4%B9%9D%E8%99%9F%E8%A8%88%E7%95%AB" title="貝爾實驗室九號計畫">九號計畫</a>與<a href="/wiki/Inferno" title="Inferno">Inferno</a>系統取代，皆用於分散運算式環境。它們並不像其他Unix系統，而是選擇內建<a href="/wiki/%E5%9B%BE%E5%BD%A2%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2" title="圖形化使用者介面">圖形化使用者介面</a>。九號計畫原先並不普及，因為它剛推出時並非自由軟體。後來改在自由及開源軟體許可證<a class="new" href="/w/index.php?title=Lucent_Public_License&amp;action=edit&amp;redlink=1" title="Lucent Public License（頁面不存在）">Lucent Public License</a>釋出後，便開始擁有廣大的使用者及社群。Inferno已被售予<a class="new" href="/w/index.php?title=Vita_Nuova&amp;action=edit&amp;redlink=1" title="Vita Nuova（頁面不存在）">Vita Nuova</a>並以GPL/MIT許可證釋出。
</p>, <p>當前，計算機按照計算能力排名世界500強中472台使用Linux，6台使用Windows，其餘為各類<a href="/wiki/BSD" title="BSD">BSD</a>等Unix。<sup class="noprint Template-Fact"><a href="/wiki/Wikipedia:%E5%88%97%E6%98%8E%E6%9D%A5%E6%BA%90" title="Wikipedia:列明來源"><span style="white-space: nowrap;" title="來源請求。">[來源請求]</span></a></sup>
</p>, <p><a href="/wiki/Microsoft_Windows" title="Microsoft Windows">Microsoft Windows</a>系列作業系統是在微軟給IBM機器設計的<a href="/wiki/MS-DOS" title="MS-DOS">MS-DOS</a>的基礎上設計的圖形作業系統。現在的Windows系統，如Windows 2000、Windows XP皆是建立於現代的<a href="/wiki/Windows_NT" title="Windows NT">Windows NT</a>核心。NT核心是由<a href="/wiki/OS/2" title="OS/2">OS/2</a>和<a href="/wiki/OpenVMS" title="OpenVMS">OpenVMS</a>等系統上借用來的。Windows可以在32位元和64位元的<a class="mw-redirect" href="/wiki/%E8%8B%B1%E7%89%B9%E7%88%BE" title="英特爾">Intel</a>和<a class="mw-redirect" href="/wiki/AMD" title="AMD">AMD</a>的處理器上運行，但是早期的版本也可以在<a href="/wiki/DEC_Alpha" title="DEC Alpha">DEC Alpha</a>、<a class="mw-redirect" href="/wiki/MIPS_architecture" title="MIPS architecture">MIPS</a>與<a href="/wiki/PowerPC" title="PowerPC">PowerPC</a>架構上運行。
</p>, <p>雖然由於人們對於開放原始碼作業系統興趣的提升，Windows的市場佔有率有所下降，但是到2004年為止，Windows作業系統在世界範圍內佔據了桌面作業系統90%的市場。<sup class="reference" id="cite_ref-2"><a href="#cite_note-2">[2]</a></sup>
</p>, <p>Windows系統也被用在低階和中階伺服器上，並且支援網頁服務的資料庫服務等一些功能。最近微軟花費了很大研究與開發的經費用於使Windows擁有能運行企業的大型程式的能力。
</p>, <p>Windows XP在2001年10月25日發布，2004年8月24日發布服務包2（Service Pack 2），2008年4月21日發布最新的服務包3（Service Pack 3）。
</p>, <p>微軟上一款作業系統Windows Vista（開發代碼為Longhorn）於2007年1月30日發售<sup class="reference" id="cite_ref-3"><a href="#cite_note-3">[3]</a></sup>。<a href="/wiki/Windows_Vista" title="Windows Vista">Windows Vista</a>增加了許多功能，尤其是系統的安全性和網路管理功能，並且其擁有介面華麗的<a href="/wiki/Windows_Aero" title="Windows Aero">Aero Glass</a>。但是整體而言，其在全球市場上的口碑卻並不是很好。其後繼者<a href="/wiki/Windows_7" title="Windows 7">Windows 7</a>則是於2009年10月22日發售，<a href="/wiki/Windows_7" title="Windows 7">Windows 7</a>改善了<a href="/wiki/Windows_Vista" title="Windows Vista">Windows Vista</a>為人詬病的效能問題，相較於<a href="/wiki/Windows_Vista" title="Windows Vista">Windows Vista</a>，在同樣的硬體環境下，<a href="/wiki/Windows_7" title="Windows 7">Windows 7</a>的表現較Windows Vista為好。而最新的<a href="/wiki/Windows_10" title="Windows 10">Windows 10</a>則是於2015年7月29日發售。
</p>, <p><b>macOS</b>，前稱「Mac OS X」或「OS X」，是一套執行於蘋果<a class="mw-redirect" href="/wiki/%E9%BA%A6%E9%87%91%E5%A1%94%E7%94%B5%E8%84%91" title="麥金塔電腦">Macintosh</a>系列電腦上的作業系統。Mac OS是首個在商用領域成功的<a href="/wiki/%E5%9B%BE%E5%BD%A2%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2" title="圖形化使用者介面">圖形化使用者介面</a>系統。Macintosh開發成員包括<a class="new" href="/w/index.php?title=%E6%AF%94%E5%B0%94%C2%B7%E9%98%BF%E7%89%B9%E9%87%91%E6%A3%AE&amp;action=edit&amp;redlink=1" title="比爾·阿特金森（頁面不存在）">比爾·阿特金森</a>（Bill Atkinson）、<a href="/wiki/%E5%82%91%E5%A4%AB%C2%B7%E6%8B%89%E6%96%AF%E9%87%91" title="傑夫·拉斯金">傑夫·拉斯金</a>（Jef Raskin）和<a class="mw-redirect" href="/wiki/%E5%AE%89%E8%BF%AA%C2%B7%E8%B5%AB%E8%8C%A8%E8%8F%B2%E5%B0%94%E5%BE%B7" title="安迪·赫茨菲爾德">安迪·赫茨菲爾德</a>（Andy Hertzfeld）。從OS X 10.8開始在名字中去掉Mac，僅保留OSX和版本號。2016年6月13日在WWDC2016上，蘋果公司將OS X更名為macOS，現行的最新的系統版本是<a href="/wiki/MacOS_Catalina" title="MacOS Catalina">macOS Catalina</a>。
</p>, <p>Google Chrome OS是一項Google的輕型電腦作業系統計劃，其基於Google的瀏覽器<a href="/wiki/Google_Chrome" title="Google Chrome">Google Chrome</a>的Linux核心。
</p>, <p>大型主機以及<a href="/wiki/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F" title="嵌入式系統">嵌入式</a>作業系統均與Unix或Windows家族關係不大，除了<a href="/wiki/Android" title="Android">Android</a>，<a href="/wiki/Windows_Embedded_Compact" title="Windows Embedded Compact">Windows CE</a>、<a href="/wiki/Windows_NT" title="Windows NT">Windows NT</a>及<a href="/wiki/Windows_Embedded_Standard" title="Windows Embedded Standard">Windows XP Embedded</a>是Windows的血親產品，以及數種*BSD和嵌入式Linux套件為例外。
</p>, <p>少數較舊的OS今日依然在一些需要穩定性的市場中活躍，例如IBM的<a href="/wiki/OS/2" title="OS/2">OS/2</a><span id="noteTag-cite_ref-sup"><sup class="reference" id="cite_ref-4"><a href="#cite_note-4">[註 1]</a></sup></span>、<a href="/wiki/BeOS" title="BeOS">BeOS</a>以及<a class="new" href="/w/index.php?title=XTS-400&amp;action=edit&amp;redlink=1" title="XTS-400（頁面不存在）">XTS-400</a>。
</p>, <p>在<a href="/wiki/%E7%94%B5%E5%AD%90%E5%95%86%E5%8A%A1" title="電子商務">達康時代</a>狂潮過後，如<a href="/wiki/AmigaOS" title="AmigaOS">AmigaOS</a>與<a href="/wiki/RISC_OS" title="RISC OS">RISC OS</a>等少數人使用的OS依然持續建立，以滿足狂熱的愛好者社群與特殊專業使用者。
</p>, <p>優秀的作業系統必定要具備能讓各種能力級別的使用者滿足各種需求的工具包視覺化的高效簡便程式環境，以程式來建立程式，就如立法的法律指導規範新的法案的建立。這其實是作業系統所隱含的一部分，決定了可以有多強的擴充能力。比如，某個作業系統有對應的開發者工具包整合環境程式並且是個視覺化的，還能讓能力不太高的人一看能懂的，用於修改某個聲音合成器包含頻譜顯示，可要是作業系統本身不支援也沒有提供可用的工具程式，就會變得很繁瑣，很可能為了達到這個目標，開發者就要預備好各種相關的工具程式，甚至自己來編寫一系列相關的工具程式建立專門的工具包，最後還要檢查代碼。若是有人想通過音樂來生成五線譜，要對類似標記式語言的五線譜規則對應一下，對各種音色，音準採集並總結出一整套規律，通過聲音辨識可以辨識出樂器的類別等，進而標出樂符完成從聲音到樂譜的轉換並生成。可是對人聲卻又更為複雜也不必要如此。若是需要用聲音的波形圖重現聲音，沒有相關的工具集是相當難實現，另外只有使用同一套聲音的波形繪製規則的所生成的波形圖用來再現的聲音才是原來的聲音。
</p>, <p>在作為商品出售的作業系統軟體的歷史中常常因為其中包含的瀏覽器，媒體播放器在美國遭到反壟斷起訴，差點使得功能上殘缺不全。少數作業系統軟體能夠提供較為全面的App和實用工具程式。
</p>, <p>作業系統軟體的編譯也需要對應的編譯環境。
</p>, <p>在同一台電腦上執行不同的作業系統軟體，就能夠以不同的方式來使用電腦資源。比如，在Mac上執行OS X和Windows以兩種不同的技術<a href="/wiki/OpenCL" title="OpenCL">OpenCL</a>，<a href="/wiki/Core_Image" title="Core Image">Core Image</a>:<a href="/wiki/DirectX" title="DirectX">DirectX</a>來使用圖形卡實現類似的作用。
</p>, <p>通過圖像辨識和聲音辨識來進行資訊搜尋。
</p>, <p>能夠滿足不同需求所要求的精確程度對時間的精細劃分，以及尺度細分可以互聯，同步，協調原本必須由多個人協同合作才能完成的隨時需要調整並相互同步的操控作業，這就必須有即時訊息傳送顯示，視覺化的用於協調同步計劃任務的組態指令碼，以及執行這樣計劃任務的完整組件。
</p>, <p>研究與建立未來的作業系統依舊進行著。作業系統朝提供更省電、網路化、易用、華麗的使用者介面的方向來改進。類UNIX OS通過和<a href="/wiki/%E6%A1%8C%E9%9D%A2%E7%8E%AF%E5%A2%83" title="桌面環境">桌面環境</a>開發者協作，正努力讓自己改進使用環境。
</p>, <p>eyeOS是一套基於PHP實現的半開源類比雲端運算作業系統，但其實質只是在網路瀏覽器中提供一種類似無界限的類獨立作業系統，其並非於任何類似虛擬化中實現的真正電腦作業系統，能提供諸如Word、PPT、Excel的在線處理功能…
</p>, <p><a class="mw-redirect" href="/wiki/Hurd" title="Hurd">GNU Hurd</a>是一個以完全相容Unix並加強許多功能為目標的微核心架構。微軟<a href="/wiki/Singularity" title="Singularity">Singularity</a>是一個奠基於<a href="/wiki/.NET%E6%A1%86%E6%9E%B6" title=".NET框架">.Net</a>並以建立較佳<a href="/wiki/%E8%A8%98%E6%86%B6%E9%AB%94%E4%BF%9D%E8%AD%B7" title="記憶體保護">記憶體保護</a>機制為目標的研究計畫。
</p>, <p>作業系統位於底層硬體與使用者之間，是兩者溝通的橋樑。使用者可以通過作業系統的使用者介面，輸入命令。作業系統則對命令進行解釋，驅動硬體裝置，實現使用者要求。以現代標準而言，一個標準PC的作業系統應該提供以下的功能：
</p>, <p>不管是常駐程式或者應用程式，他們都以<a href="/wiki/%E8%A1%8C%E7%A8%8B" title="行程">行程</a>為標準執行單位。當年運用<a href="/wiki/%E5%86%AF%C2%B7%E8%AF%BA%E4%BC%8A%E6%9B%BC%E7%BB%93%E6%9E%84" title="馮·紐曼結構">馮·諾伊曼結構</a>建造電腦時，每個<a href="/wiki/%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8" title="中央處理器">中央處理器</a>最多只能同時執行一個行程。早期的作業系統（例如DOS）也不允許任何程式打破這個限制，且DOS同時只有執行一個行程（雖然DOS自己宣稱他們擁有<a class="new" href="/w/index.php?title=%E7%B5%82%E6%AD%A2%E4%B8%A6%E7%AD%89%E5%BE%85%E9%A7%90%E7%95%99&amp;action=edit&amp;redlink=1" title="終止並等待駐留（頁面不存在）">終止並等待駐留</a>能力，可以部分且艱難地解決這問題）。現代的作業系統，即使只擁有一個CPU，也可以利用<a class="mw-redirect" href="/wiki/%E5%A4%9A%E8%BF%9B%E7%A8%8B" title="多行程">多行程</a>（multitask）功能同時執行多個行程。<b>行程管理</b>指的是作業系統調整多個行程的功能。
</p>, <p>由於大部分的電腦只包含一顆中央處理器，在單核心（Core）的情況下多行程只是簡單迅速地切換各行程，讓每個行程都能夠執行，在多核心或多處理器的情況下，所有行程透過許多<a class="mw-redirect" href="/wiki/%E4%B8%A6%E8%A1%8C%E8%A8%88%E7%AE%97" title="並行計算">協同技術</a>在各處理器或核心上轉換。越多行程同時執行，每個行程能分配到的時間比率就越小。很多作業系統在遇到此問題時會出現諸如音效斷續或滑鼠跳格的情況（稱做顛簸（Thrashing），一種作業系統只能不停執行自己的管理程式並耗盡系統資源的狀態，其他使用者或硬體的程式皆無法執行。行程管理通常實踐了<b>分時</b>的概念，大部分的作業系統可以利用指定不同的特權等級（priority），為每個行程改變所佔的分時比例。特權越高的行程，執行優先順序越高，單位時間內佔的比例也越高。互動式作業系統也提供某種程度的回饋機制，讓直接與使用者互動的行程擁有較高的特權值。
</p>, <p>除了行程管理之外，作業系統尚有擔負起<a href="/wiki/%E8%A1%8C%E7%A8%8B%E9%96%93%E9%80%9A%E8%A8%8A" title="行程間通訊">行程間通訊</a>（IPC）、行程異常終止處理以及<a href="/wiki/%E6%AD%BB%E9%94%81" title="死結">死結</a>（Dead Lock）偵測及處理等較為艱深的問題。
</p>, <p>在行程之下尚有<a href="/wiki/%E5%A4%9A%E7%BA%BF%E7%A8%8B" title="多執行緒">執行緒</a>的問題，但是大部分的作業系統並不會處理執行緒所遭遇的問題，通常作業系統僅止於提供一組API讓使用者自行操作或透過<a href="/wiki/%E8%99%9B%E6%93%AC%E6%A9%9F%E5%99%A8" title="虛擬機器">虛擬機器</a>的管理機制控制執行緒之間的互動。
</p>, <p>根據<b>帕金森定律</b>：「<b>你給程式再多記憶體，程式也會想盡辦法耗光</b>」，因此<a href="/wiki/%E7%A8%8B%E5%BA%8F%E5%91%98" title="程式設計師">程式設計師</a>通常希望系統給他<b>無限量</b>且<b>無限快</b>的記憶體。大部分的現代電腦記憶體架構都是<a href="/wiki/%E8%A8%98%E6%86%B6%E9%AB%94%E9%9A%8E%E5%B1%A4" title="記憶體階層">階層式</a>的，最快且數量最少的<a href="/wiki/%E5%AF%84%E5%AD%98%E5%99%A8" title="暫存器">暫存器</a>為首，然後是<a class="mw-redirect" href="/wiki/%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98" title="高速緩衝記憶體">快取</a>、<a href="/wiki/%E9%9A%8F%E6%9C%BA%E5%AD%98%E5%8F%96%E5%AD%98%E5%82%A8%E5%99%A8" title="隨機存取記憶體">記憶體</a>以及最慢的<a class="mw-redirect" href="/wiki/%E7%A1%AC%E7%9B%98%E9%A9%B1%E5%8A%A8%E5%99%A8" title="硬碟機">磁碟儲存裝置</a>。而作業系統的<b>記憶體管理</b>提供尋找可用的記憶空間、組態與釋放記憶空間以及交換記憶體和低速儲存裝置的內含物……等功能。此類又被稱做<b>虛擬記憶體管理</b>的功能大幅增加每個行程可獲得的記憶空間（通常是4<a class="mw-redirect" href="/wiki/Gigabyte" title="Gigabyte">GB</a>，即使實際上RAM的數量遠少於這數目）。然而這也帶來了微幅降低執行效率的缺點，嚴重時甚至也會導致行程崩潰。
</p>, <p>記憶體管理的另一個重點活動就是藉由CPU的幫助來管理虛擬位置。如果同時有許多行程儲存於記憶裝置上，作業系統必須防止它們互相干擾對方的記憶體內容（除非透過某些協定在可控制的範圍下操作，並限制可存取的記憶體範圍）。分割記憶體空間可以達成目標。每個行程只會看到整個記憶體空間（從0到記憶體空間的最大上限）被組態給它自己（當然，有些位置被作業系統保留而禁止存取）。CPU事先存了幾個表以比對虛擬位置與實際記憶體位置，這種方法稱為<a href="/wiki/%E5%88%86%E9%A0%81" title="分頁">分頁</a>組態。
</p>, <p>藉由對每個行程產生分開獨立的位置空間，作業系統也可以輕易地一次釋放某行程所佔據的所有記憶體。如果這個行程不釋放記憶體，作業系統可以結束行程並將記憶體自動釋放。
</p>, <p>所謂的<b>檔案系統</b>，通常指稱管理磁碟資料的系統，可將資料以目錄或檔案的型式儲存。每個檔案系統都有自己的特殊格式與功能，例如日誌管理或不需磁碟重整。
</p>, <p>作業系統擁有許多種內建檔案系統。例如<a href="/wiki/Linux" title="Linux">Linux</a>擁有非常廣泛的內建檔案系統，如<a href="/wiki/Ext2" title="Ext2">ext2</a>、<a href="/wiki/Ext3" title="Ext3">ext3</a>、<a href="/wiki/Ext4" title="Ext4">ext4</a>、<a href="/wiki/ReiserFS" title="ReiserFS">ReiserFS</a>、<a class="new" href="/w/index.php?title=Reiser4&amp;action=edit&amp;redlink=1" title="Reiser4（頁面不存在）">Reiser4</a>、<a class="new" href="/w/index.php?title=Global_File_System&amp;action=edit&amp;redlink=1" title="Global File System（頁面不存在）">GFS</a>、<a class="new" href="/w/index.php?title=GFS2&amp;action=edit&amp;redlink=1" title="GFS2（頁面不存在）">GFS2</a>、<a class="new" href="/w/index.php?title=OCFS&amp;action=edit&amp;redlink=1" title="OCFS（頁面不存在）">OCFS</a>、<a class="new" href="/w/index.php?title=OCFS2&amp;action=edit&amp;redlink=1" title="OCFS2（頁面不存在）">OCFS2</a>、<a class="new" href="/w/index.php?title=NILFS&amp;action=edit&amp;redlink=1" title="NILFS（頁面不存在）">NILFS</a>與<a href="/wiki/Google%E6%AA%94%E6%A1%88%E7%B3%BB%E7%B5%B1" title="Google檔案系統">Google檔案系統</a>。Linux也支援非原生檔案系統，例如<a href="/wiki/XFS" title="XFS">XFS</a>、<a href="/wiki/JFS_(%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F)" title="JFS (檔案系統)">JFS</a>、<a href="/wiki/FAT" title="FAT">FAT</a>家族與<a href="/wiki/NTFS" title="NTFS">NTFS</a>。另一方面，<a href="/wiki/Microsoft_Windows" title="Microsoft Windows">Windows</a>能支援的檔案系統衹有FAT12、FAT16、FAT32、EXFAT與NTFS。NTFS系統是Windows上最可靠與最有效率的檔案系統。其他的FAT家族都比NTFS老舊，且對於檔案長度與分割磁碟能力都有很大限制，因此造成很多問題。而UNIX的檔案系統多半是<a href="/wiki/Unix%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F" title="Unix檔案系統">UFS</a>，而UNIX中的一個分支<a href="/wiki/Solaris" title="Solaris">Solaris</a>最近則開始支援一種新式的<a href="/wiki/ZFS" title="ZFS">ZFS</a>。
</p>, <p>大部份上述的檔案系統都有兩種建置方法。系統可以以<a class="mw-redirect" href="/wiki/%E6%97%A5%E8%AA%8C%E6%AA%94%E6%A1%88%E7%B3%BB%E7%B5%B1" title="日誌檔案系統">日誌式</a>或非日誌式建置。日誌式檔案系統可以以較安全的手法執行系統恢復。如果一個沒有日誌式建置的檔案系統遇上突然的系統崩潰，導致資料建立在一半時停頓，則此系統需要特殊的檔案系統檢查工具才能復原；日誌式則可自動恢復。<a href="/wiki/%E5%BE%AE%E8%BD%AF" title="微軟">微軟</a>的NTFS與Linux的ext3、ext4、reiserFS與JFS都是日誌式檔案系統。
</p>, <p>每個檔案系統都實作相似的目錄／子目錄架構，但在相似之下也有許多不同點。微軟使用「<b>\</b>」符號以建立目錄／子目錄關係，且檔案名稱忽略其大小寫差異；UNIX系統則是以「<b>/</b>」建立目錄架構，且檔案名稱大小寫有差異。(其實這是給系統呼叫的，"/"或"\"並不實際存在硬碟)
</p>, <p>許多現代的作業系統都具備操作主流網路通訊協定<a class="mw-redirect" href="/wiki/TCP/IP%E5%8D%8F%E8%AE%AE" title="TCP/IP協定">TCP/IP</a>的能力。也就是說這樣的作業系統可以進入網路世界，並且與其他系統分享諸如檔案、印表機與掃描器等資源。
</p>, <p>許多作業系統也支援多個過去網路啟蒙時代的各路網路通訊協定，例如<a href="/wiki/IBM" title="IBM">IBM</a>建立的<a href="/wiki/IBM%E7%B3%BB%E7%B5%B1%E7%B6%B2%E8%B7%AF%E6%9E%B6%E6%A7%8B" title="IBM系統網路架構">系統網路架構</a>、<a href="/wiki/%E8%BF%AA%E5%90%89%E5%A4%9A" title="迪吉多">DEC</a>在它所生產的系統所設定的<span class="ilh-all" data-foreign-title="DECnet" data-lang-code="en" data-lang-name="英語" data-orig-title="DECnet"><span class="ilh-page"><a class="new" href="/w/index.php?title=DECnet&amp;action=edit&amp;redlink=1" title="DECnet（頁面不存在）">DECnet</a></span><span class="noprint ilh-comment">（<span class="ilh-lang">英語</span><span class="ilh-colon">：</span><span class="ilh-link"><a class="extiw" href="https://en.wikipedia.org/wiki/DECnet" title="en:DECnet"><span dir="auto" lang="en">DECnet</span></a></span>）</span></span>架構與微軟為Windows製作的特殊通訊協定。還有許多為了特殊功能而研發的通訊協定，例如可以在網路上提供檔案存取功能的<a href="/wiki/%E7%BD%91%E7%BB%9C%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F" title="網路檔案系統">NFS</a>系統。現今大量用於影音串流（Streaming media）及遊戲訊息傳送的<a href="/wiki/%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%8D%8F%E8%AE%AE" title="使用者資料報協定">UDP</a>協定等。
</p>, <p>大多數作業系統都含有某種程度的<a href="/wiki/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8" title="資訊安全">資訊安全</a>機制。資訊安全機制主要基於兩大理念：
</p>, <p>除了允許／拒絕形式的安全機制，一個高安全等級的系統也會提供記錄選項，允許記錄各種請求對資源存取的行為（例如「誰曾經讀了這個檔案？」）。
</p>, <p>肇因於軍方與商業組織將敏感資料記錄在電腦上，安全機制在作業系統歷史上是一個被長久關注與討論的問題。<a class="mw-redirect" href="/wiki/%E7%BE%8E%E5%9C%8B" title="美國">美國</a><a href="/wiki/%E7%BE%8E%E5%9B%BD%E5%9B%BD%E9%98%B2%E9%83%A8" title="美國國防部">國防部</a>（DoD）便創立了<b>《<a class="new" href="/w/index.php?title=%E5%8F%AF%E4%BF%A1%E8%B3%B4%E4%B9%8B%E8%A8%88%E7%AE%97%E6%A9%9F%E7%B3%BB%E7%B5%B1%E8%A9%95%E9%91%91%E7%A8%8B%E5%BA%8F&amp;action=edit&amp;redlink=1" title="可信賴之計算機系統評鑑程式（頁面不存在）">可信賴之計算機系統評鑑程式</a>》</b>（<span class="ilh-all" data-foreign-title="TCSEC" data-lang-code="en" data-lang-name="英語" data-orig-title="TCSEC"><span class="ilh-page"><a class="new" href="/w/index.php?title=TCSEC&amp;action=edit&amp;redlink=1" title="TCSEC（頁面不存在）">TCSEC</a></span><span class="noprint ilh-comment">（<span class="ilh-lang">英語</span><span class="ilh-colon">：</span><span class="ilh-link"><a class="extiw" href="https://en.wikipedia.org/wiki/TCSEC" title="en:TCSEC"><span dir="auto" lang="en">TCSEC</span></a></span>）</span></span>），此手冊確立了評鑑安全機製成效的基本原則。這對作業系統作者來說非常重要，因為TCSEC是用於評鑑、分類與選拔出用於處理、儲存與獲取敏感或機密資料的電腦系統的標準程式。
</p>, <p>內部資訊安全可視為防止正在執行的程式任意存取系統資源的手段。大多作業系統讓普通程式可直接操作電腦的<a href="/wiki/%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8" title="中央處理器">CPU</a>，所以產生了一些問題，例如怎樣把可如作業系統一樣處理事務、執行同樣特殊指令的程式強迫停止，畢竟在此情境下，作業系統也只是另一個平起平坐的程式。為通用作業系統所生產的CPU通常於硬體層級上實踐了一定程度的特殊指令保護概念。通常特權層級較低的程式想要執行某些特殊指令時會被阻斷，例如直接存取像是硬碟之類的外部裝置。因此，程式必須得經由詢問作業系統，讓作業系統執行特殊指令來存取磁碟。因此作業系統就有機會檢查此程式的識別身分，並依此接受或拒絕它的請求。
</p>, <p>在不支援特殊指令架構的硬體上，另一個也是唯一的保護方法，則是作業系統並不直接利用CPU執行使用者的程式，而是藉由<a class="mw-redirect" href="/wiki/%E6%A8%A1%E6%8B%9F%E5%99%A8" title="模擬器">類比</a>一個CPU或提供一<a href="/wiki/P-code%E6%9C%BA" title="P-code機">P-code機</a>系統（<a href="/wiki/%E4%BC%AA%E4%BB%A3%E7%A0%81" title="虛擬碼">虛擬碼</a>執行機），像是<a href="/wiki/Java" title="Java">Java</a>一樣讓程式在<a href="/wiki/%E8%99%9B%E6%93%AC%E6%A9%9F%E5%99%A8" title="虛擬機器">虛擬機器</a>上執行。
</p>, <p>內部安全機制在多使用者電腦上特別重要：它允許每個系統使用者擁有自己個人的檔案與目錄，且其他使用者不能任意存取或刪除。因為任何程式都可能繞過作業系統的監控，更有可能繞過側錄程式的監控，擁有強制力的內部安全機制在側錄啟動時也非常重要。
</p>, <p>通常一個作業系統會為其他網路上的電腦或使用者提供（主持）各種服務。這些服務通常藉由<a href="/wiki/TCP/UDP%E7%AB%AF%E5%8F%A3%E5%88%97%E8%A1%A8" title="TCP/UDP埠列表">埠</a>或作業系統網路位址後的數字存取點提供。通常此服務包括提供檔案共享（NFS）、列印共享、<a href="/wiki/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6" title="電子郵件">電子郵件</a>、<a href="/wiki/%E7%B6%B2%E7%AB%99" title="網站">網頁服務</a>與檔案傳輸協定（<a href="/wiki/%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE" title="檔案傳輸協定">FTP</a>）。外部資訊安全的最前線，是諸如<a href="/wiki/%E9%98%B2%E7%81%AB%E5%A2%99" title="防火牆">防火牆</a>等的硬體裝置。在作業系統內部也常設定許多種類的軟體防火牆。軟體防火牆可設定接受或拒絕在作業系統上執行的服務與外界的連線。因此任何人都可以安裝並執行某些不安全的網路服務，例如<a href="/wiki/Telnet" title="Telnet">Telnet</a>或FTP，並且設定除了某些自用通道之外阻擋其他所有連線，以達成防堵不良連線的機制。
</p>, <p>今日大部分的作業系統都包含<a href="/wiki/%E5%9B%BE%E5%BD%A2%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2" title="圖形化使用者介面">圖形化使用者介面</a>（GUI）。有幾類較舊的作業系統將圖形化使用者介面與<a class="mw-disambig" href="/wiki/%E6%A0%B8%E5%BF%83" title="核心">核心</a>緊密結合，例如最早的Windows與<a class="mw-redirect" href="/wiki/Mac_OS" title="Mac OS">Mac OS</a>實作產品。此種手法可提供較快速的圖形回應能力，且實作時不需切割模組因而較為省工，但是會有強烈副作用，例如圖形系統崩潰將導致整個系統崩潰，例如<a href="/wiki/%E8%93%9D%E5%B1%8F%E6%AD%BB%E6%9C%BA" title="藍白當機">藍白當機畫面</a>。許多近代的作業系統已<a class="mw-redirect" href="/wiki/%E6%A8%A1%E7%B5%84_(%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88)" title="模組 (程式設計)">模組化</a>，將圖形介面的子系統與核心分開（已知Linux與Mac OS X原先就是如此設計，而某些擴充版本的Windows終於也採用此手法）。
</p>, <p>許多作業系統允許使用者安裝或創造任何他們喜歡的圖形化使用者介面<sup class="reference" id="cite_ref-5"><a href="#cite_note-5">[4]</a></sup>。大部分的Unix與Unix衍生系統（BSD、Linux與<a class="mw-redirect" href="/wiki/Minix" title="Minix">Minix</a>）通常會安裝<a class="mw-redirect" href="/wiki/X_Window%E7%B3%BB%E7%B5%B1" title="X視窗系統">X Window</a>系統配合<a href="/wiki/GNOME" title="GNOME">GNOME</a>或<a href="/wiki/KDE" title="KDE">KDE</a>桌面環境。而某些作業系統就沒有這麼彈性的圖形化使用者介面，例如Windows。這類的作業系統只能透過外加的程式來改變其圖形化使用者介面，甚至根本只能改變諸如選單風格或顏色組態等部分<sup class="noprint Template-Fact"><a href="/wiki/Wikipedia:%E5%88%97%E6%98%8E%E6%9D%A5%E6%BA%90" title="Wikipedia:列明來源"><span style="white-space: nowrap;" title="來源請求開始於2007年7月16日。">[來源請求]</span></a></sup>。
</p>, <p>圖形化使用者介面與時並進，例如Windows在每次新版本上市時就會將其圖形化使用者介面改頭換面，而Mac OS的GUI也在Mac OS X上市時出現重大轉變。
</p>, <p>所謂的<b>驅動程式</b>（Device driver）是指某類設計來與硬體互動的電腦軟體。通常是一設計完善的裝置互動介面，利用與此硬體連接的電腦匯排流或通訊子系統，提供對此裝置下令與接收資訊的功能；以及最終目的，將訊息提供給作業系統或應用程式。驅動程式是針對特定硬體與特定作業系統設計的軟體，通常以作業系統核心模組、應用軟體包或普通電腦程式的形式在作業系統<a href="/wiki/%E5%86%85%E6%A0%B8" title="核心">核心</a>底下執行，以達到通透順暢地與硬體互動的效果，且提供硬體在處理非同步的時間依賴性介面（asynchronous time-dependent hardware interface）時所需的中斷處理常式。
</p>, <p>設計驅動程式的主要目的在於操作<b>抽象化</b>，任何硬體模組，既使是同一類的裝置，在硬體設計面上也有巨大差異。廠商推出的較新模組通常更可靠更有效率，控制方法也會有所不同。電腦與其作業系統每每不能預期那些現有與新裝置的變異之處，因此無法知道其操作方法。為解決此問題作業系統通常會<b>主動制訂</b>每種裝置該有的操作方式，而驅動程式功能則是將那些作業系統制訂的行為描述，轉譯為可讓裝置瞭解的自訂操作手法。
</p>, <p>理論上適合的驅動程式一旦安裝，相對應的新裝置就可以無誤地執行。此新驅動程式可以讓此裝置完美地切合在作業系統中，讓使用者察覺不到這是作業系統原本沒有的功能。
</p>, <p>作業系統理論研究者有時把作業系統分成四大部分：
</p>, <p>當然，本節所提出的四部結構觀也絕非放之四海皆準。例如，在早期的微軟視窗作業系統中，各部分耦合程度很深，難以區分彼此。而在使用<a href="/wiki/Exokernel" title="Exokernel">外核</a>結構的作業系統中，則根本沒有驅動程式的概念。因而，本節的討論只適用於一般情況，具體特例需具體分析。
</p>, <p>作業系統中四大部分的不同布局，也就形成了幾種整體結構的分野。常見的結構包括：簡單結構、層結構、微核心結構、垂直結構、和<a href="/wiki/%E8%99%9B%E6%93%AC%E6%A9%9F%E5%99%A8" title="虛擬機器">虛擬機器</a>結構。
</p>, <p>作業系統的分類沒有一個單一的標準，可以根據工作方式分為<a href="/wiki/%E6%89%B9%E5%A4%84%E7%90%86%E4%BB%BB%E5%8A%A1" title="批次處理任務">批次處理作業系統</a>、<a href="/wiki/%E5%88%86%E6%99%82%E7%B3%BB%E7%B5%B1" title="分時系統">分時作業系統</a>、<a class="mw-redirect" href="/wiki/RTOS" title="RTOS">即時作業系統</a>、<a href="/wiki/%E7%BD%91%E7%BB%9C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F" title="網路作業系統">網路作業系統</a>和<a href="/wiki/%E5%88%86%E5%B8%83%E5%BC%8F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F" title="分散式作業系統">分散式作業系統</a>等；根據架構可以分為<a class="new" href="/w/index.php?title=%E5%8D%95%E5%86%85%E6%A0%B8%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F&amp;action=edit&amp;redlink=1" title="單核心作業系統（頁面不存在）">單核心作業系統</a>等；根據執行的環境，可以分為桌面作業系統，<a href="/wiki/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F" title="嵌入式作業系統">嵌入式作業系統</a>等；根據指令的長度分為8bit, 16bit, 32bit, <a href="/wiki/64%E4%BD%8D%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F" title="64位元作業系統">64bit</a>的作業系統。
</p>, <p>核心是作業系統最核心最基礎的構件，其結構往往對作業系統的外部特性以及應用領域有著一定程度的影響。儘管隨著理論和實踐的不斷演進，作業系統高層特性與核心結構之間的耦合有日趨縮小之勢，但習慣上，核心結構仍然是作業系統分類之常用標準。
</p>, <p>核心的結構可以分為<a href="/wiki/%E5%86%85%E6%A0%B8#单内核" title="核心">單核心</a>、<a href="/wiki/%E5%86%85%E6%A0%B8#微内核" title="核心">微核心</a>、<a href="/wiki/%E8%B6%85%E5%BE%AE%E5%86%85%E6%A0%B8" title="超微核心">超微核心</a>、以及<a href="/wiki/%E5%86%85%E6%A0%B8#外内核" title="核心">外核</a>等。
</p>, <p>單核心結構是作業系統中各核心部件雜然混居的形態，該結構產生於1960年代（亦有1950年代初之說，尚存爭議），歷史最長，是作業系統核心與外圍分離時的最初形態。
</p>, <p>微核心結構是1980年代產生出來的較新的核心結構，強調結構性部件與功能性部件的分離。20世紀末，基於微核心結構，理論界中又發展出了超微核心與外核心等多種結構。儘管自1980年代起，大部分理論研究都集中在以微核心為首的「新興」結構之上，然而，在應用領域之中，以單核心結構為基礎的作業系統卻一直占據著主導地位。
</p>, <p>在眾多常用作業系統之中，除了<a href="/wiki/QNX" title="QNX">QNX</a>和基於Mach的UNIX等個別系統外，幾乎全部採用單核心結構，例如大部分的<a href="/wiki/UNIX" title="UNIX">Unix</a>、<a href="/wiki/Linux" title="Linux">Linux</a>，以及<a href="/wiki/Microsoft_Windows" title="Microsoft Windows">Windows</a>（<a href="/wiki/%E5%BE%AE%E8%BD%AF" title="微軟">微軟</a>聲稱Windows NT是基於改良的微核心架構的，儘管理論界對此存有異議）。微核心和超微核心結構主要用於研究性作業系統，還有一些<a href="/wiki/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F" title="嵌入式系統">嵌入式系統</a>使用外核。
</p>, <p>基於單核心的作業系統通常有著較長的歷史淵源。例如，絕大部分UNIX的家族史都可上溯至1960年代。該類作業系統多數有著相對古老的設計和實現（例如某些UNIX中存在著大量1970年代、1980年代的代碼）。另外，往往在效能方面略優於同一應用領域中採用其他核心結構的作業系統（但通常認為此種效能優勢不能完全歸功於單核心結構）。
</p>, <p><b>通用作業系統</b>是面向一般沒有特定應用需求的作業系統。由於沒有特定的應用需求，通用作業系統為了適應更廣泛的應用，需要支援更多的硬體與軟體，需要針對所有的使用者體驗，對系統進行更新。通用作業系統是一個工程量繁重的作業系統。
</p>, <p>「<a class="mw-redirect" href="/wiki/RTOS" title="RTOS">即時作業系统</a>」（Real Time OS）泛指所有據有一定即時資源排程以及通訊能力的作業系統。而所謂「即時」，不同語境中往往有著非常不同的意義。某些時候僅僅用作「高效能」的同義詞。但在作業系統理論中「即時性」所指的通常是特定操作所消耗的時間（以及空間）的上限是可預知的。比如，如果說某個作業系統提供即時記憶體分配操作，那也就是說一個記憶體分配操作所用時間（及空間）無論如何也不會超出作業系統所承諾的上限。即時性在某些領域非常重要，比如在工業控制、醫療器材、影音訊合成、以及軍事領域，即時性都是無可或缺的特性。
</p>, <p>常用即時作業系統有<a href="/wiki/QNX" title="QNX">QNX</a>、<a href="/wiki/VxWorks" title="VxWorks">VxWorks</a>、<a href="/wiki/RTLinux" title="RTLinux">RTLinux</a>等等，而<a href="/wiki/Linux" title="Linux">Linux</a>、多數<a href="/wiki/UNIX" title="UNIX">UNIX</a>、以及多數<a href="/wiki/Microsoft_Windows" title="Microsoft Windows">Windows</a>家族成員等都屬於非即時作業系統。作業系統整體的即時性通常依仗核心的即時能力，但有時也可在非即時核心上建立即時作業系統，很多在Windows上建立的即時作業系統就屬於此類。
</p>, <p>在<a class="mw-redirect" href="/wiki/POSIX" title="POSIX">POSIX</a>標準中專有一系用於規範即時作業系統的API，其中包括POSIX.4、POSIX.4a、POSIX.4b（合稱POSIX.4）以及POSIX.13等等。符合POSIX.4的作業系統通常被認可為即時作業系統（但即時作業系統並不需要符合POSIX.4標準）。
</p>, <p>所謂8位元、16位元、32位元、64位元、128位元等術語有時指匯流排寬度，有時指指令寬度（在定長指令集中），而在作業系統理論中主要是指記憶體定址的寬度。如果記憶體的定址寬度是16位元，那麼每一個記憶體位址可以用16個二進位位來表示，也就是說可以在64KB的範圍內定址。同樣道理32位元的寬度對應4GB的定址範圍，64位元的寬度對應16 Exabyte的定址範圍。記憶體定址範圍並非僅僅是對作業系統而言的，其他類型的軟體的設計有時也會被定址範圍而影響。但是在作業系統的設計與實現中，定址範圍卻有著更為重要的意義。
</p>, <p>在早期的16位元作業系統中，由於64KB的定址範圍太小，大都都採用「段」加「線性位址」的二維平面位址空間的設計。分配記憶體時通常需要考慮「段置換」的問題，同時，應用程式所能夠使用的位址空間也往往有比較小的上限。
</p>, <p>在32位元作業系統中，4GB的定址範圍對於一般應用程式來說是綽綽有餘的，因而，通常使用一維的線性位址空間，而不使用「段」。
</p>]