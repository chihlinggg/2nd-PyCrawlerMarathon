[<p><b>程式語言</b>（英語：<span lang="en">programming language</span>），是用來定義<a href="/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F" title="電腦程式">電腦程式</a>的<a class="mw-redirect" href="/wiki/%E5%BD%A2%E5%BC%8F%E8%AA%9E%E8%A8%80" title="形式語言">形式語言</a>。它是一種被<a href="/wiki/%E6%A0%87%E5%87%86%E5%8C%96" title="標準化">標準化</a>的交流技巧，用來向<a class="mw-redirect" href="/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA" title="電腦">電腦</a>發出指令。一種能夠讓<a href="/wiki/%E7%A8%8B%E5%BA%8F%E5%91%98" title="程式設計師">程式設計師</a>準確地定義電腦所需要使用資料的電腦語言，並精確地定義在不同情況下所應當採取的行動。
</p>, <p>最早的程式語言是在<a href="/wiki/%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A1%AC%E9%AB%94%E6%AD%B7%E5%8F%B2" title="計算機硬體歷史">電腦發明</a>之前產生的，當時是用來控制<span class="ilh-all" data-foreign-title="Jacquard loom" data-lang-code="en" data-lang-name="英語" data-orig-title="提花織布機"><span class="ilh-page"><a class="new" href="/w/index.php?title=%E6%8F%90%E8%8A%B1%E7%B9%94%E5%B8%83%E6%A9%9F&amp;action=edit&amp;redlink=1" title="提花織布機（頁面不存在）">提花織布機</a></span><span class="noprint ilh-comment">（<span class="ilh-lang">英語</span><span class="ilh-colon">：</span><span class="ilh-link"><a class="extiw" href="https://en.wikipedia.org/wiki/Jacquard_loom" title="en:Jacquard loom"><span dir="auto" lang="en">Jacquard loom</span></a></span>）</span></span>及<a href="/wiki/%E8%87%AA%E5%8B%95%E6%BC%94%E5%A5%8F%E9%8B%BC%E7%90%B4" title="自動演奏鋼琴">自動演奏鋼琴</a>的動作<sup class="reference" id="cite_ref-1"><a href="#cite_note-1">[1]</a></sup>。在電腦領域已發明了上千不同的程式語言，而且每年仍有新的程式語言誕生。很多程式語言需要用<a href="/wiki/%E6%8C%87%E4%BB%A4%E5%BC%8F%E7%B7%A8%E7%A8%8B" title="指令式編程">指令</a>方式說明計算的程式，而有些程式語言則屬於<a class="new" href="/w/index.php?title=%E5%AE%A3%E5%91%8A%E5%BC%8F%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88&amp;action=edit&amp;redlink=1" title="宣告式程式設計（頁面不存在）">宣告式程式設計</a>，說明需要的結果，而不說明如何計算。
</p>, <p>程式語言的描述一般可以分為<span class="ilh-all" data-foreign-title="Syntax (programming languages)" data-lang-code="en" data-lang-name="英語" data-orig-title="語法 (程式語言)"><span class="ilh-page"><a class="new" href="/w/index.php?title=%E8%AA%9E%E6%B3%95_(%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80)&amp;action=edit&amp;redlink=1" title="語法 (程式語言)（頁面不存在）">語法</a></span><span class="noprint ilh-comment">（<span class="ilh-lang">英語</span><span class="ilh-colon">：</span><span class="ilh-link"><a class="extiw" href="https://en.wikipedia.org/wiki/Syntax_(programming_languages)" title="en:Syntax (programming languages)"><span dir="auto" lang="en">Syntax (programming languages)</span></a></span>）</span></span>及<a class="mw-redirect" href="/wiki/%E8%AF%AD%E4%B9%89" title="語意">語義</a>。語法是說明程式設計語言中，哪些符號或文字的組合方式是正確的，語義則是對於編程的解釋<sup class="reference" id="cite_ref-2"><a href="#cite_note-2">[2]</a></sup>。有些語言是用規格檔案定義，例如<a class="mw-redirect" href="/wiki/C%E8%AA%9E%E8%A8%80" title="C語言">C語言</a>的規格檔案也是<a class="mw-redirect" href="/wiki/ISO" title="ISO">ISO</a>標準中一部份，2011年後的版本為ISO/IEC 9899:2017，而其他55語言（像<a href="/wiki/Perl" title="Perl">Perl</a>）有一份主要的<span class="ilh-all" data-foreign-title="Programming language implementation" data-lang-code="en" data-lang-name="英語" data-orig-title="编程语言实现"><span class="ilh-page"><a class="new" href="/w/index.php?title=%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0&amp;action=edit&amp;redlink=1" title="程式語言實現（頁面不存在）">程式語言實現</a></span><span class="noprint ilh-comment">（<span class="ilh-lang">英語</span><span class="ilh-colon">：</span><span class="ilh-link"><a class="extiw" href="https://en.wikipedia.org/wiki/Programming_language_implementation" title="en:Programming language implementation"><span dir="auto" lang="en">Programming language implementation</span></a></span>）</span></span>檔案，視為是<span class="ilh-all" data-foreign-title="reference implementation" data-lang-code="en" data-lang-name="英語" data-orig-title="參考實現"><span class="ilh-page"><a class="new" href="/w/index.php?title=%E5%8F%83%E8%80%83%E5%AF%A6%E7%8F%BE&amp;action=edit&amp;redlink=1" title="參考實現（頁面不存在）">參考實現</a></span><span class="noprint ilh-comment">（<span class="ilh-lang">英語</span><span class="ilh-colon">：</span><span class="ilh-link"><a class="extiw" href="https://en.wikipedia.org/wiki/reference_implementation" title="en:reference implementation"><span dir="auto" lang="en">reference implementation</span></a></span>）</span></span>。
</p>, <p>程式語言原本是被設計成專門使用在電腦上的，但它們也可以用來定義<a href="/wiki/%E7%AE%97%E6%B3%95" title="演算法">演算法</a>或者<a href="/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84" title="資料結構">資料結構</a>。正是因為如此，程式設計師才會試圖使程式碼更<a class="mw-redirect" href="/wiki/%E5%8F%AF%E8%AE%80%E6%80%A7" title="可讀性">容易閱讀</a>。
</p>, <p>程式語言往往使程式設計師能夠比使用機器語言更準確地表達他們所想表達的目的。對那些從事<a href="/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6" title="電腦科學">電腦科學</a>的人來說，懂得程式設計語言是十分重要的，因為在當今所有的計算都需要程式設計語言才能完成。
</p>, <p><mark class="template-facttext" title="需要提供文獻來源">目前發明了許多的程式語言，程式語言本身可能修改以符合新需求，或是和其他的程式語言結合使用，儘管人們多次試圖創造可以符合所有需求的<a href="/wiki/%E9%80%9A%E7%94%A8%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80" title="通用程式語言">通用程式語言</a>，但以「符合所有需求」的標準來看，這些嘗試都失敗了</mark><sup class="noprint Template-Fact"><a href="/wiki/Wikipedia:%E5%88%97%E6%98%8E%E6%9D%A5%E6%BA%90" title="Wikipedia:列明來源"><span style="white-space: nowrap;" title="來源請求開始於2017年2月10日。">[來源請求]</span></a></sup>。之所以有那麼多種不同的程式語言存在的原因是，編寫程式的初衷其實也各不相同；新手與老手之間技術的差距非常小，而且有許多語言對新手來說太容易學；還有，不同程式之間的執行成本（<span lang="en">runtime cost</span>）各不相同。
</p>, <p>有許多用於特殊用途的語言，只在特殊情況下使用。例如，<a href="/wiki/PHP" title="PHP">PHP</a>專門用來顯示<a class="mw-redirect" href="/wiki/%E7%BD%91%E9%A1%B5" title="網頁">網頁</a>；<a href="/wiki/Perl" title="Perl">Perl</a>更適合文字處理；<a class="mw-redirect" href="/wiki/C%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80" title="C程式語言">C語言</a>被廣泛用於<a href="/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F" title="作業系統">作業系統</a>和<a class="mw-redirect" href="/wiki/%E7%BC%96%E8%AF%91%E5%99%A8" title="編譯器">編譯器</a>的開發（所謂的系統程式設計）。<sup class="reference" id="cite_ref-3"><a href="#cite_note-3">[3]</a></sup>
</p>, <p><a href="/wiki/%E9%AB%98%E7%BA%A7%E8%AF%AD%E8%A8%80" title="高階語言">高階語言</a>的出現使得電腦程式設計語言不再過度地依賴某種特定的機器或環境。這是因為高階語言在不同的平台上會被編譯成不同的機器語言，而不是直接被機器執行。最早出現的程式語言<a class="mw-redirect" href="/wiki/FORTRAN" title="FORTRAN">FORTRAN</a>的一個主要目標，就是實現平台獨立。
</p>, <p>雖然大多數的語言既可被<a class="mw-redirect" href="/wiki/%E7%BC%96%E8%AF%91" title="編譯">編譯</a>又可被<a class="mw-redirect" href="/wiki/%E8%A7%A3%E8%AF%91" title="解譯">解譯</a>，但大多數僅在一種情況下能夠良好執行。在一些程式設計系統中，程式要經過幾個階段的編譯，一般而言，後階段的編譯往往更接近機器語言。這種常用的使用技巧最早在1960年代末用於<a href="/wiki/BCPL" title="BCPL">BCPL</a>，編譯程式先編譯一個叫做「0代碼」的轉換程式（<span lang="en">representation</span>），然後再使用虛擬器轉換到可以執行於機器上的真實代碼。這種成功的技巧之後又用於<a href="/wiki/Pascal_(%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80)" title="Pascal (程式語言)">Pascal</a>和P-code，以及<a href="/wiki/Smalltalk" title="Smalltalk">Smalltalk</a>和二進位碼，在很多時候，中間過渡的代碼往往是解譯，而不是編譯的。
</p>, <p>如果所使用的翻譯的機制是將所要翻譯的程式碼作為一個整體翻譯，並之後執行內部格式，那麼這個翻譯過程就被稱為編譯。因此，一個<a class="mw-redirect" href="/wiki/%E7%BC%96%E8%AF%91%E5%99%A8" title="編譯器">編譯器</a>是一個將人可閱讀的程式文字（叫做<a href="/wiki/%E6%BA%90%E4%BB%A3%E7%A0%81" title="原始碼">原始碼</a>）作為輸入的資料，然後輸出可執行檔（<span lang="en">object code</span>）。所輸出的可執行檔可以是機器語言，由電腦的<a href="/wiki/%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8" title="中央處理器">中央處理器</a>直接執行，或者是某種模擬器的二進位代碼。
</p>, <p>如果程式碼是在執行時才<a class="mw-redirect" href="/wiki/%E8%A7%A3%E8%AD%AF" title="解譯">即時翻譯</a>，那麼這種翻譯機制就被稱作直譯。經直譯的程式執行速度往往比編譯的程式慢，但往往更具靈活性，因為它們能夠與執行環境互相作用。
</p>, <p>每一種<b>程式設計語言</b>可以被看作是一套包含<a href="/wiki/%E8%AF%AD%E6%B3%95" title="語法">語法</a>、<a href="/wiki/%E8%AF%8D%E6%B1%87" title="詞彙">詞彙</a>和<a class="mw-redirect" href="/wiki/%E8%AF%AD%E4%B9%89" title="語意">含義</a>的正式規範。
</p>, <p>這些規範通常包括：
</p>, <p><b>程式語言</b>不成文規定：
</p>, <p>大多數被廣泛使用或經久不衰的<b>程式語言</b>，擁有負責<a href="/wiki/%E6%A0%87%E5%87%86%E5%8C%96" title="標準化">標準化</a>的組織，經常會晤來創造及發布該<b>程式語言</b>的正式定義，並討論擴充或貫徹現有的定義。
</p>, <p>現代電腦內部的<a href="/wiki/%E6%95%B0%E6%8D%AE" title="資料">資料</a>都只以<a class="mw-disambig" href="/wiki/%E4%BA%8C%E5%85%83" title="二元">二元</a>方式儲存，即開-關模式（<span lang="en">on-off</span>）。現實世界中代表資訊的各種資料，例如名字、銀行帳號、度量以及同樣低階的二元資料，都經由<b>程式設計語言</b>整理，成為高階的概念。
</p>, <p>一個<a class="mw-disambig" href="/wiki/%E7%A8%8B%E5%BA%8F" title="程式">程式</a>中專門處理<a href="/wiki/%E6%95%B0%E6%8D%AE" title="資料">資料</a>的那個系統被稱為<b>程式語言</b>的<a class="mw-redirect" href="/wiki/%E5%9E%8B%E6%85%8B%E7%B3%BB%E7%B5%B1" title="型態系統">型態系統</a>（<span lang="en">type system</span>）；對型態系統的研究和設計被稱為型態理論（<span lang="en">type theory</span>）。語言可以被分為靜態型態系統（<span lang="en">statically typed systems</span>），例如<a href="/wiki/C%2B%2B" title="C++">C++</a>和<a href="/wiki/Java" title="Java">Java</a>，和動態型態系統（<span lang="en">dynamically typed systems</span>），例如<a class="mw-redirect" href="/wiki/Lisp" title="Lisp">Lisp</a>，<a href="/wiki/JavaScript" title="JavaScript">JavaScript</a>，<a href="/wiki/Tcl" title="Tcl">Tcl</a>和<a href="/wiki/Prolog" title="Prolog">Prolog</a>。前者可被進一步分為包含宣告型態（<span lang="en">manifest type</span>）的語言，即每一個變數和函式的型態都清楚地宣告，或type-inferred語言（例如MUMPS，ML）。
</p>, <p>大多數語言還能夠在內建的型態基礎上組合出複雜的資料結構型態（使用陣列，列表，堆疊，檔案等等）。<a href="/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1" title="物件導向程式設計">物件導向語言</a>（<span lang="en">Object Oriented Language</span>，又譯作「物件導向語言」）允許程式設計師定義新的資料型態，即<a href="/wiki/%E5%AF%B9%E8%B1%A1_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)" title="物件 (電腦科學)">物件</a>（<span lang="en">objects</span>），以及執行於該物件的<a href="/wiki/%E5%AD%90%E7%A8%8B%E5%BA%8F" title="子程式">函式</a>（<span lang="en">functions</span>）和<a href="/wiki/%E6%96%B9%E6%B3%95_(%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8)" title="方法 (電腦科學)">方法</a>（<span lang="en">methods</span>）。
</p>, <p>除了何時以及如何確定表達式和型態的聯絡，另外一個重要的問題就是語言到底定義了哪些型態，以及允許哪些型態作為表達式的值。諸如C程式語言之類的低階語言允許程式命名記憶體位置、記憶體區域以及編譯時的常數；<a href="/wiki/ANSI_C" title="ANSI C">ANSI C</a>甚至允許<a class="mw-redirect" href="/wiki/%E8%A1%A8%E8%BE%BE%E5%BC%8F" title="表達式">表達式</a>返回結構值（<span lang="en">struct values</span>）。功能性的語言一般允許變數直接使用執行時計算出的值，而不是指出該值可能儲存的<a class="mw-redirect" href="/wiki/%E5%86%85%E5%AD%98%E5%9C%B0%E5%9D%80" title="記憶體位址">記憶體位址</a>。
</p>, <p>常見的<a href="/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84" title="資料結構">資料結構</a>：
</p>, <p>一旦<a href="/wiki/%E6%95%B0%E6%8D%AE" title="資料">資料</a>被確定，<a href="/wiki/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0" title="機器學習">機器</a>必須被告知如何對這些資料進行處理。較簡單的<a class="mw-redirect" href="/wiki/%E6%8C%87%E4%BB%A4%E5%9E%8B%E7%B6%93%E6%BF%9F" title="指令型經濟">指令</a>可以使用<a class="mw-redirect" href="/wiki/%E9%97%9C%E9%8D%B5%E5%AD%97" title="關鍵字">關鍵字</a>或定義好的語法結構來完成。不同的<b>程式語言</b>利用序列系統來取得或組合這些語句。除此之外，一個<b>程式語言</b>中的其他指令也可以用來控制處理的過程（例如分支、迴圈等）。
</p>, <p><a href="/wiki/%E5%8F%83%E7%85%A7" title="參照">參照</a>的中心思想是必須有一種間接設計儲存空間的方法。最常見的方法是通過命名變數。根據不同的語言，進一步的參照可以包括指向其他儲存空間的<a class="mw-redirect" href="/wiki/%E6%8C%87%E9%92%88_(%E4%BF%A1%E6%81%AF%E5%AD%A6)" title="指標 (資訊學)">指標</a>。還有一種類似的方法就是命名一組指令。大多數程式設計語言使用<a class="mw-redirect" href="/wiki/%E5%AE%8F" title="宏">宏</a>呼叫、過程呼叫或函式呼叫。使用這些代替的名字能讓程式更靈活，並更具重用性。
</p>, <p>程式語言可透過機械、電腦來達成與完成人類需求的演算、功能與目的。
</p>, <p>透過低階程式語言或高階程式語言，將實體間接達成傳輸連結或控制實體。
</p>, <p>高階程式語言可發展多功能的應用程式軟體，如：作業系統、工程計算機軟體、轉檔軟體、燒錄軟體、播放軟體、網頁設計…等。
</p>, <p>程式語言已超過上千種，大部份用在計算領域<sup class="reference" id="cite_ref-4"><a href="#cite_note-4">[4]</a></sup>。
程式語言和其他人類使用的語言在精準度和完整性上有很大的差異。
</p>, <p>人們在用自然語言溝通時，內容可以不明確，甚至小的錯誤，而聽的人仍然可能理解說的人想要說的內容。但電腦不同，電腦「只做被告知要做的事」，無法理解程式設計者想要寫的程式。語言的定義、編程以及編程輸入的組合需完整定義程式執行時的外部特性。另一方面，演算法的概念可以表示為<a class="mw-redirect" href="/wiki/%E8%99%9B%E6%93%AC%E7%A2%BC" title="虛擬碼">虛擬碼</a>，是交織有自然語言和程式碼的程式語言，和其他人溝通時使用，此時就不一定要那麼精確。
</p>, <p>程式語言提供定義片段資料的結構化機制，以及在資料中需自動進行的運算或是轉換。程式設計者利用程式語言提供的<a href="/wiki/%E6%8A%BD%E8%B1%A1%E5%8C%96_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)" title="抽象化 (計算機科學)">抽象化</a>來表示計算的相關概念，這些概念則是由許多最簡單元素（稱為<span class="ilh-all" data-foreign-title="language primitive" data-lang-code="en" data-lang-name="英語" data-orig-title="語言基元"><span class="ilh-page"><a class="new" href="/w/index.php?title=%E8%AA%9E%E8%A8%80%E5%9F%BA%E5%85%83&amp;action=edit&amp;redlink=1" title="語言基元（頁面不存在）">語言基元</a></span><span class="noprint ilh-comment">（<span class="ilh-lang">英語</span><span class="ilh-colon">：</span><span class="ilh-link"><a class="extiw" href="https://en.wikipedia.org/wiki/language_primitive" title="en:language primitive"><span dir="auto" lang="en">language primitive</span></a></span>）</span></span>）的集合所組成<sup class="reference" id="cite_ref-5"><a href="#cite_note-5">[5]</a></sup>。<a href="/wiki/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1" title="程式設計">程式設計</a>就是指利用語言基元來撰寫新的程式，或是將舊程式改寫，配合新的應用或是新的環境。
</p>, <p>電腦程式語言可能是以批次處理任務的方式執行，中間不需和使用者互動，也有可能是由用戶在<a href="/wiki/%E7%9B%B4%E8%AD%AF%E5%99%A8" title="直譯器">直譯器</a>中指定執行特定的的程式。若某一程式語言的是目的是在某一應用軟體（如<a href="/wiki/Unix_shell" title="Unix shell">Unix shell</a>）或其他<a class="mw-redirect" href="/wiki/%E5%91%BD%E4%BB%A4%E5%88%97%E4%BB%8B%E9%9D%A2" title="命令列介面">命令列介面</a>執行其他程式，此程式語言會稱為<a href="/wiki/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80" title="手稿語言">手稿語言</a>。
</p>, <p>很難去比較哪一種程式語言的使用量最大，而且「使用量」一詞也很難定義。某一種程式語言可能需要較多的時間進行開發，另一種程式語言可能產生的程式碼較長，第三種程式語言可能在CPU中執行的時間較長。有些語言在特定的領域仍十分受歡迎，例如<a href="/wiki/COBOL" title="COBOL">COBOL</a>在公司的資料中心仍相當常用，多半是在<a href="/wiki/%E5%A4%A7%E5%9E%8B%E8%AE%A1%E7%AE%97%E6%9C%BA" title="大型電腦">大型計算機</a>上執行<sup class="reference" id="cite_ref-6"><a href="#cite_note-6">[6]</a></sup><sup class="reference" id="cite_ref-7"><a href="#cite_note-7">[7]</a></sup>，<a href="/wiki/Fortran" title="Fortran">Fortran</a>常用在科學及工程應用，<a class="mw-redirect" href="/wiki/C%E8%AA%9E%E8%A8%80" title="C語言">C語言</a>常用在嵌入式應用及作業系統中等。
</p>, <p>有許多不同的量測方式不同程式語言使用的程度，不同的量測方式也有其各自的誤差：
</p>, <p>根據TIOBE指數在2018年9月，十大最受歡迎的語言如下：<a href="/wiki/Java" title="Java">Java</a>、<a href="/wiki/C" title="C">C</a>、<a href="/wiki/Python" title="Python">Python</a>、<a href="/wiki/C%2B%2B" title="C++">C++</a>、<a href="/wiki/Visual_Basic_.NET" title="Visual Basic .NET">Visual Basic .NET</a>、<a href="/wiki/C" title="C">C#</a>、<a href="/wiki/PHP" title="PHP">PHP</a>、<a href="/wiki/JavaScript" title="JavaScript">JavaScript</a>、<a href="/wiki/SQL" title="SQL">SQL</a>及<a href="/wiki/Objective-C" title="Objective-C">Objective-C</a>.<sup class="reference" id="cite_ref-11"><a href="#cite_note-11">[11]</a></sup>。
</p>, <p>1940年代當電腦剛剛問世的時候，程式設計師必須手動控制電腦。當時的電腦十分昂貴，唯一想到利用程式設計語言來解決問題的人是德國工程師<a href="/wiki/%E5%BA%B7%E6%8B%89%E5%BE%B7%C2%B7%E6%A5%9A%E6%BE%A4" title="康拉德·楚澤">康拉德·楚澤</a>。
</p>, <p>幾十年後，電腦的價格大幅度下跌，而電腦程式也越來越複雜。也就是說，開發時間已經遠比執行時間寶貴。
</p>, <p>於是，新的整合、可視的開發環境越來越流行。它們減少了所付出的時間、金錢（以及腦細胞）。只要輕敲幾個鍵，一整段代碼就可以使用了。這也得益於可以重用的程式碼庫<sup class="reference" id="cite_ref-Fischer_12-0"><a href="#cite_note-Fischer-12">[12]</a></sup>。
</p>, <p class="mw-empty-elt">
</p>]