[<p><b>HTTP/2</b>（超文字傳輸協定第2版，最初命名為<b>HTTP 2.0</b>），簡稱為<b>h2</b>（基於TLS/1.2或以上版本的加密連接）或<b>h2c</b>（非加密連接）<sup class="reference" id="cite_ref-1"><a href="#cite_note-1">[1]</a></sup>，是<a class="mw-redirect" href="/wiki/HTTP" title="HTTP">HTTP</a>協定的的第二個主要版本，使用於<a class="mw-redirect" href="/wiki/%E5%85%A8%E7%90%83%E8%B3%87%E8%A8%8A%E7%B6%B2" title="全球資訊網">全球資訊網</a>。
</p>, <p>HTTP/2是<a class="mw-redirect" href="/wiki/HTTP" title="HTTP">HTTP</a>協定自1999年HTTP 1.1發布後的首個更新，主要基於<a href="/wiki/SPDY" title="SPDY">SPDY</a>協定。它由<a href="/wiki/%E4%BA%92%E8%81%94%E7%BD%91%E5%B7%A5%E7%A8%8B%E4%BB%BB%E5%8A%A1%E7%BB%84" title="網際網路工程任務組">網際網路工程任務組</a>（IETF）的Hypertext Transfer Protocol Bis（httpbis）工作小組進行開發。<sup class="reference" id="cite_ref-charter_2-0"><a href="#cite_note-charter-2">[2]</a></sup>該組織於2014年12月將HTTP/2標準提議遞交至<span class="ilh-all" data-foreign-title="Internet_Engineering_Steering_Group" data-lang-code="en" data-lang-name="英語" data-orig-title="IESG"><span class="ilh-page"><a class="new" href="/w/index.php?title=IESG&amp;action=edit&amp;redlink=1" title="IESG（頁面不存在）">IESG</a></span><span class="noprint ilh-comment">（<span class="ilh-lang">英語</span><span class="ilh-colon">：</span><span class="ilh-link"><a class="extiw" href="https://en.wikipedia.org/wiki/Internet_Engineering_Steering_Group" title="en:Internet Engineering Steering Group"><span dir="auto" lang="en">Internet_Engineering_Steering_Group</span></a></span>）</span></span>進行討論<sup class="reference" id="cite_ref-3"><a href="#cite_note-3">[3]</a></sup>，於2015年2月17日被批准。<sup class="reference" id="cite_ref-approval2_4-0"><a href="#cite_note-approval2-4">[4]</a></sup>
</p>, <p>HTTP/2標準於2015年5月以RFC 7540正式發表。<sup class="reference" id="cite_ref-rfc7540_5-0"><a href="#cite_note-rfc7540-5">[5]</a></sup>HTTP/2的標準化工作由<a href="/wiki/Google_Chrome" title="Google Chrome">Chrome</a>、<a href="/wiki/Opera%E7%80%8F%E8%A6%BD%E5%99%A8" title="Opera瀏覽器">Opera</a>、<a class="mw-redirect" href="/wiki/Firefox" title="Firefox">Firefox</a><sup class="reference" id="cite_ref-6"><a href="#cite_note-6">[6]</a></sup>、<a href="/wiki/Internet_Explorer_11" title="Internet Explorer 11">Internet Explorer 11</a>、<a href="/wiki/Safari" title="Safari">Safari</a>、<span class="ilh-all" data-foreign-title="Amazon Silk" data-lang-code="en" data-lang-name="英語" data-orig-title="Amazon Silk"><span class="ilh-page"><a class="new" href="/w/index.php?title=Amazon_Silk&amp;action=edit&amp;redlink=1" title="Amazon Silk（頁面不存在）">Amazon Silk</a></span><span class="noprint ilh-comment">（<span class="ilh-lang">英語</span><span class="ilh-colon">：</span><span class="ilh-link"><a class="extiw" href="https://en.wikipedia.org/wiki/Amazon_Silk" title="en:Amazon Silk"><span dir="auto" lang="en">Amazon Silk</span></a></span>）</span></span>及<a href="/wiki/Microsoft_Edge" title="Microsoft Edge">Edge</a>等瀏覽器提供支援。<sup class="reference" id="cite_ref-7"><a href="#cite_note-7">[7]</a></sup>
</p>, <p>多數主流瀏覽器已經在2015年底支援了該協定。<sup class="reference" id="cite_ref-browser_support_8-0"><a href="#cite_note-browser_support-8">[8]</a></sup>此外，根據<a class="new" href="/w/index.php?title=W3Techs&amp;action=edit&amp;redlink=1" title="W3Techs（頁面不存在）">W3Techs</a>的資料，截至2019年6月，全球有36.5%的網站支援了HTTP/2。<sup class="reference" id="cite_ref-9"><a href="#cite_note-9">[9]</a></sup>
</p>, <p>協定制定伊始，工作群組章程關注了下列目標和受關心的問題：<sup class="reference" id="cite_ref-charter_2-1"><a href="#cite_note-charter-2">[2]</a></sup>
</p>, <p><a href="/wiki/Facebook" title="Facebook">Facebook</a>對各方案進行了評價並最終推薦了SPDY協定<sup class="reference" id="cite_ref-10"><a href="#cite_note-10">[10]</a></sup>。HTTP 2.0的首個草稿於2012年11月發布，其內容基本和SPDY協定相同<sup class="reference" id="cite_ref-11"><a href="#cite_note-11">[11]</a></sup>。
</p>, <p>HTTP/2 相比 HTTP/1.1 的修改並不會破壞現有程式的工作，但是新的程式可以藉由新特性得到更好的速度。<sup class="reference" id="cite_ref-Chapter_12._HTTP_2.0_12-0"><a href="#cite_note-Chapter_12._HTTP_2.0-12">[12]</a></sup>
</p>, <p>HTTP/2 保留了 HTTP/1.1 的大部分語意，例如<a href="/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#请求方法" title="超文字傳輸協定">請求方法</a>、<a href="/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE#状态码" title="超文字傳輸協定">狀態碼</a>乃至<a class="mw-redirect" href="/wiki/URI" title="URI">URI</a>和絕大多數<a class="new" href="/w/index.php?title=HTTP%E5%A4%B4%E9%83%A8&amp;action=edit&amp;redlink=1" title="HTTP頭部（頁面不存在）">HTTP頭部</a>欄位一致。而 HTTP/2 採用了新的方法來編碼、傳輸 客戶端&lt;——&gt;伺服器 間的資料。<sup class="reference" id="cite_ref-Chapter_12._HTTP_2.0_12-1"><a href="#cite_note-Chapter_12._HTTP_2.0-12">[12]</a></sup>
</p>, <p><a href="/wiki/SPDY" title="SPDY">SPDY</a> (發音為"speedy") 是一個由 <a href="/wiki/Google" title="Google">Google</a> 主導的研究專案發明的HTTP替代協定。<sup class="reference" id="cite_ref-extremetech_13-0"><a href="#cite_note-extremetech-13">[13]</a></sup>SPDY一開始主要關注降低延遲，採用了TCP通道，但是使用了不同的協定來達到此目的。其與HTTP/1.1相比，主要的改變有：<sup class="reference" id="cite_ref-Grigorik_14-0"><a href="#cite_note-Grigorik-14">[14]</a></sup>
</p>, <p>HTTP/2的開發基於SPDY進行躍進式改進。在諸多修改中，最顯著的改進在於，HTTP/2使用了一份經過客製化的壓縮演算法，基於<a href="/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81" title="霍夫曼編碼">霍夫曼編碼</a>，以此替代了SPDY的動態流壓縮演算法，以避免對協定的Oracle攻擊——這一類攻擊以<a href="/wiki/CRIME" title="CRIME">CRIME</a>為代表。此外，HTTP/2禁用了諸多加密套件，以保證基於TLS的連接的前向安全。
</p>, <p>在 HTTP/2 的第一版草案（對 SPDY 協定的復刻）中，新增的效能改進不僅包括HTTP/1.1中已有的<a href="/wiki/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8" title="多路復用">多路復用</a>，修復<a href="/wiki/%E9%98%9F%E5%A4%B4%E9%98%BB%E5%A1%9E" title="隊頭阻塞">隊頭阻塞</a>問題，允許設定設定請求優先級，還包含了一個頭部壓縮演算法(HPACK)<sup class="reference" id="cite_ref-HPACK_15-0"><a href="#cite_note-HPACK-15">[15]</a></sup><sup class="reference" id="cite_ref-16"><a href="#cite_note-16">[16]</a></sup>。此外， HTTP/2 採用了二進位而非明文來打包、傳輸 客戶端&lt;——&gt;伺服器 間的資料。<sup class="reference" id="cite_ref-Chapter_12._HTTP_2.0_12-2"><a href="#cite_note-Chapter_12._HTTP_2.0-12">[12]</a></sup>
</p>, <p>有別於HTTP/1.1在連接中的明文請求，HTTP/2與SPDY一樣，將一個TCP連接分為若干個流（Stream），每個流中可以傳輸若干訊息（Message），每個訊息由若干最小的二進位影格（Frame）組成。<sup class="reference" id="cite_ref-Chapter_12._HTTP_2.0_12-3"><a href="#cite_note-Chapter_12._HTTP_2.0-12">[12]</a></sup>這也是HTTP/1.1與HTTP/2最大的區別所在。
HTTP/2中，每個用戶的操作行為被分配了一個<b>流編號</b>(stream ID)，這意味著用戶與伺服器端之間建立了一個TCP通道；協定將每個請求分割為二進位的控制影格與資料框部分，以便解析。這個舉措在SPDY中的實踐表明，相比HTTP/1.1，新頁面載入可以加快11.81% 到 47.7%<sup class="reference" id="cite_ref-17"><a href="#cite_note-17">[17]</a></sup>
</p>, <p>HPACK演算法是新引入HTTP/2的一個演算法，用於對HTTP頭部做壓縮。其原理在於：
</p>, <p>網站為了使請求數減少，通常採用對頁面上的圖片、指令碼進行<a href="/wiki/%E6%A5%B5%E7%B0%A1%E5%8C%96" title="極簡化">極簡化</a>處理。但是，這一舉措十分不方便，也不高效，依然需要諸多HTTP連結來載入頁面和頁面資源。
</p>, <p>HTTP/2引入了<b>伺服器推播</b>，即伺服器端向客戶端傳送比客戶端請求更多的資料。這允許伺服器直接提供瀏覽器彩現頁面所需資源，而無須瀏覽器在收到、解析頁面後再提起一輪請求，節約了載入時間。<sup class="reference" id="cite_ref-Pratt_18-0"><a href="#cite_note-Pratt-18">[18]</a></sup>
</p>, <p>截至2015年末，主要的瀏覽器的最新版本已經支援HTTP/2這一協定。<sup class="reference" id="cite_ref-browser_support_8-1"><a href="#cite_note-browser_support-8">[8]</a></sup>其中：
</p>, <p>HTTP/2 的設計本身允許非加密的 HTTP 協定，也允許使用 <a class="mw-redirect" href="/wiki/TLS" title="TLS">TLS 1.2</a> 或更新版本協定進行加密。<sup class="reference" id="cite_ref-20"><a href="#cite_note-20">[20]</a></sup>協定本身未要求必須使用加密，<sup class="reference" id="cite_ref-HTTP/2_Frequently_Asked_Questions_21-0"><a href="#cite_note-HTTP/2_Frequently_Asked_Questions-21">[21]</a></sup> 惟多數客戶端 (例如 Firefox,<sup class="reference" id="cite_ref-mozillawiki_22-0"><a href="#cite_note-mozillawiki-22">[22]</a></sup> Chrome, Safari, Opera, IE, Edge) 的開發者聲明，他們只會實現通過TLS加密的HTTP/2協定，這使得經TLS加密的HTTP/2(即<b>h2</b>)成為了<i>事實上的</i>強制標準，而h2c事實上被主流瀏覽器廢棄。<sup class="reference" id="cite_ref-23"><a href="#cite_note-23">[23]</a></sup>
</p>, <p>2015年9月，Google 宣布了計劃，移除對SPDY的支援，擁抱 HTTP/2<sup class="reference" id="cite_ref-24"><a href="#cite_note-24">[24]</a></sup>，並將在Chrome 51中生效。<sup class="reference" id="cite_ref-25"><a href="#cite_note-25">[25]</a></sup><sup class="reference" id="cite_ref-26"><a href="#cite_note-26">[26]</a></sup>
</p>, <p>HTTP/2 工作群組在其官方 Github 上羅列了諸多已經支援該協定的代碼實現。<sup class="reference" id="cite_ref-27"><a href="#cite_note-27">[27]</a></sup>
</p>, <p>HTTP/2的開發過程乃至協定本身都曾受到批評。
</p>, <p><a href="/wiki/FreeBSD" title="FreeBSD">FreeBSD</a>和<a href="/wiki/Varnish_cache" title="Varnish cache">Varnish cache</a>的開發者<span class="ilh-all" data-foreign-title="Poul-Henning Kamp" data-lang-code="en" data-lang-name="英語" data-orig-title="保罗-恒宁·坎瀑"><span class="ilh-page"><a class="new" href="/w/index.php?title=%E4%BF%9D%E7%BD%97-%E6%81%92%E5%AE%81%C2%B7%E5%9D%8E%E7%80%91&amp;action=edit&amp;redlink=1" title="保羅-恆寧·坎瀑（頁面不存在）">保羅-恆寧·坎瀑</a></span><span class="noprint ilh-comment">（<span class="ilh-lang">英語</span><span class="ilh-colon">：</span><span class="ilh-link"><a class="extiw" href="https://en.wikipedia.org/wiki/Poul-Henning_Kamp" title="en:Poul-Henning Kamp"><span dir="auto" lang="en">Poul-Henning Kamp</span></a></span>）</span></span>批評稱，這個標準檔案的準備過程短得不切實際，而且未基於除了SPDY之外的任何協定，以至於其他協定失去了對草案進行改進的機會。<sup class="reference" id="cite_ref-phk-queue_28-0"><a href="#cite_note-phk-queue-28">[28]</a></sup>Kampala批評說，這個協定本身與HTTP不一致，而且還毫無必要地變得極為複雜。<sup class="reference" id="cite_ref-phk-queue_28-1"><a href="#cite_note-phk-queue-28">[28]</a></sup>他還認為，這個協定違背了網際網路協定的分層原則<sup class="reference" id="cite_ref-phk-queue_28-2"><a href="#cite_note-phk-queue-28">[28]</a></sup>，例如說，將本屬於TCP傳輸層的流控制(flow control)功能放入了協定中。
</p>, <p>一開始，以HTTP工作群組某位主席為首的成員在郵寄清單<sup class="reference" id="cite_ref-29"><a href="#cite_note-29">[29]</a></sup>建議引入強制使用TLS協定實現的HTTP/2.0（Mandatory TLS in HTTP/2.0），這招致了爭議。批評者認為，加密增加了十分不必要的開銷，而且很多HTTP服務實際上無需加密，提供者也無意為此花費更多的資源。而支持者認為，實踐中TLS加密的開銷微不足道。<sup class="reference" id="cite_ref-30"><a href="#cite_note-30">[30]</a></sup>
</p>, <p>Poul-Henning Kamp 批評IETF在制定HTTP/2時，遵循了一個特定的「政治議程」（political agenda），壓縮了討論的空間。<sup class="reference" id="cite_ref-phk-queue_28-3"><a href="#cite_note-phk-queue-28">[28]</a></sup><sup class="reference" id="cite_ref-phk_31-0"><a href="#cite_note-phk-31">[31]</a></sup><sup class="reference" id="cite_ref-32"><a href="#cite_note-32">[32]</a></sup>
</p>, <p>強制加密議程的批評者認為，其基於現有的憑證框架，對於開源社區並非新創造，亦不是獨特的。2013年，一位<a class="mw-redirect" href="/wiki/%E6%80%9D%E7%A7%91" title="思科">思科</a>員工表示，現有憑證模型與路由器一類的小型化裝置並不相容，因為現有的憑證框架需要為每張憑證付出不可避免的成本，還需要進行每年更新的流程。<sup class="reference" id="cite_ref-Cisco2013_33-0"><a href="#cite_note-Cisco2013-33">[33]</a></sup>工作群組最終未能在強制加密這一點上達成一致，但是大部分客戶端只實現了基於TLS的HTTP/2，使之成為事實標準。<sup class="reference" id="cite_ref-HTTP/2_Frequently_Asked_Questions_21-1"><a href="#cite_note-HTTP/2_Frequently_Asked_Questions-21">[21]</a></sup>
</p>, <p>HTTP/2也被批評未能支援<a href="/wiki/%E6%9C%BA%E4%BC%9A%E6%80%A7%E5%8A%A0%E5%AF%86" title="機會性加密">機會性加密</a>，即類似<a class="mw-redirect" href="/wiki/SMTP" title="SMTP">SMTP</a>中存在已久的<a href="/wiki/STARTTLS" title="STARTTLS">STARTTLS</a>一樣能抵禦<span class="ilh-all" data-foreign-title="passive monitoring" data-lang-code="en" data-lang-name="英語" data-orig-title="被动监控"><span class="ilh-page"><a class="new" href="/w/index.php?title=%E8%A2%AB%E5%8A%A8%E7%9B%91%E6%8E%A7&amp;action=edit&amp;redlink=1" title="被動監控（頁面不存在）">被動監控</a></span><span class="noprint ilh-comment">（<span class="ilh-lang">英語</span><span class="ilh-colon">：</span><span class="ilh-link"><a class="extiw" href="https://en.wikipedia.org/wiki/passive_monitoring" title="en:passive monitoring"><span dir="auto" lang="en">passive monitoring</span></a></span>）</span></span>的措施。 批評者指出，HTTP/2的提議違背了IETF自身制定的《最佳實踐 188》（BCP 188） 即 <a class="external mw-magiclink-rfc" href="https://tools.ietf.org/html/rfc7258" rel="nofollow">RFC 7258</a>。<sup class="reference" id="cite_ref-Murenin20150109_34-0"><a href="#cite_note-Murenin20150109-34">[34]</a></sup>這份檔案指出，被動監控應被當作一種攻擊，IETF指定的標準應當設定抵禦這種攻擊的措施（例如機會性加密）。目前，已經有一系列機會性加密規範被提出<sup class="reference" id="cite_ref-35"><a href="#cite_note-35">[35]</a></sup><sup class="reference" id="cite_ref-36"><a href="#cite_note-36">[36]</a></sup>
<sup class="reference" id="cite_ref-37"><a href="#cite_note-37">[37]</a></sup>，工作群組也制定了 draft-ietf-httpbis-http2-encryption-01 這一官方版方案。
</p>]