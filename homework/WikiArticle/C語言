[<p><b>C</b>是一種通用的<a class="mw-redirect" href="/wiki/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80" title="程式語言">程式語言</a>，廣泛用於<a href="/wiki/%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6" title="系統軟體">系統軟體</a>與<a class="mw-redirect" href="/wiki/%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6" title="應用軟體">應用軟體</a>的開發。於1969年至1973年間，為了移植與開發<a href="/wiki/UNIX" title="UNIX">UNIX</a><a class="mw-redirect" href="/wiki/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1" title="作業系統">作業系統</a>，由<a href="/wiki/%E4%B8%B9%E5%B0%BC%E6%96%AF%C2%B7%E9%87%8C%E5%A5%87" title="丹尼斯·里奇">丹尼斯·里奇</a>與<a href="/wiki/%E8%82%AF%C2%B7%E6%B1%A4%E6%99%AE%E9%80%8A" title="肯·湯普遜">肯·湯普遜</a>，以<a class="mw-redirect" href="/wiki/B%E8%AF%AD%E8%A8%80" title="B語言">B語言</a>為基礎，在<a href="/wiki/%E8%B4%9D%E5%B0%94%E5%AE%9E%E9%AA%8C%E5%AE%A4" title="貝爾實驗室">貝爾實驗室</a>設計、開發出來。
</p>, <p>C語言具有高效、靈活、功能豐富、表達力強和較高的<a href="/wiki/%E7%A7%BB%E6%A4%8D_(%E8%BB%9F%E9%AB%94)" title="移植 (軟體)">可移植性</a>等特點，在<a href="/wiki/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1" title="程式設計">程式設計</a>中備受青睞，成為最近25年使用最為廣泛的程式語言<sup class="reference" id="cite_ref-AutoTX-3_2-0"><a href="#cite_note-AutoTX-3-2">[2]</a></sup>。目前，C語言<a href="/wiki/%E7%B7%A8%E8%AD%AF%E5%99%A8" title="編譯器">編譯器</a>普遍存在於各種不同的<a href="/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F" title="作業系統">作業系統</a>中，例如<a href="/wiki/Microsoft_Windows" title="Microsoft Windows">Microsoft Windows</a>、<a class="mw-redirect" href="/wiki/Mac_OS_X" title="Mac OS X">macOS</a>、<a href="/wiki/Linux" title="Linux">Linux</a>、<a class="mw-redirect" href="/wiki/Unix" title="Unix">Unix</a>等。C語言的設計影響了眾多後來的程式語言，例如<a href="/wiki/C%2B%2B" title="C++">C++</a>、<a href="/wiki/Objective-C" title="Objective-C">Objective-C</a>、<a href="/wiki/Java" title="Java">Java</a>、<a href="/wiki/C%E2%99%AF" title="C♯">C#</a>等。
</p>, <p>二十世紀八十年代，為了避免各開發廠商用的C語言的語法產生差異，由<a class="mw-redirect" href="/wiki/%E7%BE%8E%E5%9C%8B%E5%9C%8B%E5%AE%B6%E6%A8%99%E6%BA%96%E5%B1%80" title="美國國家標準局">美國國家標準局</a>為C語言訂定了一套完整的國際標準語法，稱為<a href="/wiki/ANSI_C" title="ANSI C">ANSI C</a>，作為C語言的標準。二十世紀八十年代至今的有關程式開發工具，一般都支援符合<a href="/wiki/ANSI_C" title="ANSI C">ANSI C</a>的語法。
</p>, <p>C語言設計目標是提供一種能以簡易的方式編譯、處理低階記憶體、產生少量的<a class="mw-redirect" href="/wiki/%E6%A9%9F%E6%A2%B0%E7%A2%BC" title="機器碼">機器碼</a>以及不需要任何執行環境支援便能執行的程式語言。C語言也很適合搭配<a href="/wiki/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80" title="組合語言">組合語言</a>來使用。儘管C語言提供許多低階處理的功能，但仍保持良好<a class="mw-redirect" href="/wiki/%E8%B7%A8%E5%B9%B3%E5%8F%B0" title="跨平台">跨平台</a>的特性，以一個標準規格寫出的C語言程式可在許多電腦平台上進行編譯，甚至包含一些嵌入式處理器（<a class="mw-redirect" href="/wiki/%E5%BE%AE%E6%8E%A7%E5%88%B6%E5%99%A8" title="微控制器">微控制器</a>或稱MCU）以及<a class="mw-redirect" href="/wiki/%E8%B6%85%E7%B4%9A%E9%9B%BB%E8%85%A6" title="超級電腦">超級電腦</a>等作業平台。
</p>, <p>C語言最早由<a href="/wiki/%E4%B8%B9%E5%B0%BC%E6%96%AF%C2%B7%E9%87%8C%E5%A5%87" title="丹尼斯·里奇">丹尼斯·里奇</a>（Dennis Ritchie）為了在<a href="/wiki/PDP-11" title="PDP-11">PDP-11</a>電腦上運行的<a class="mw-redirect" href="/wiki/Unix" title="Unix">Unix</a>系統所設計出來的程式語言，第一次發展在1969年到1973年之間。
</p>, <p>C源於<a href="/wiki/BCPL" title="BCPL">BCPL語言</a>，後者由<a href="/wiki/%E9%A6%AC%E4%B8%81%C2%B7%E7%90%86%E5%AF%9F%E5%BE%B7" title="馬丁·理察德">馬丁·理察德</a>（Martin Richards）於1967年左右設計實現。BCPL是一門"無類型"的程式語言：它僅能操作一種資料類型，即<a href="/wiki/%E5%AD%97_(%E8%AE%A1%E7%AE%97%E6%9C%BA)" title="字 (電腦)">機器字</a>（machine word）。1970年，肯·湯普遜為執行在<a href="/wiki/PDP-7" title="PDP-7">PDP-7</a>上的首個Unix系統設計了一個精簡版的BCPL，這個語言被稱為<a class="mw-redirect" href="/wiki/B%E8%AF%AD%E8%A8%80" title="B語言">B語言</a>，它也是無類型的。
</p>, <p>Unix最早運行在PDP-7上，是以<a class="mw-redirect" href="/wiki/%E7%B5%84%E5%90%88%E8%AA%9E%E8%A8%80" title="組合語言">組合語言</a>寫成。在PDP-11出現後，丹尼斯·里奇與<a href="/wiki/%E8%82%AF%C2%B7%E6%B1%A4%E6%99%AE%E9%80%8A" title="肯·湯普遜">肯·湯普遜</a>著手將<a class="mw-redirect" href="/wiki/Unix" title="Unix">Unix</a>移植到PDP-11上，無類型的語言在PDP-11上愈發顯得合適。PDP-11提供了多種不同規格大小的基本物件：一位元組長的字元，兩位元組長的整型數以及四位元組長的浮點數。B語言無法處理這些不同規格大小的物件，也沒有提供單獨的運算子去操作它們。
</p>, <p>C語言最初嘗試通過向B語言中增加資料類型的想法來處理那些不同類型的資料。和大多數語言一樣，在C中，每個物件都有一個類型以及一個值；類型決定了可用於值的操作的含義，以及物件占用的儲存空間大小。
</p>, <p>1973年，Unix<a class="mw-redirect" href="/wiki/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1" title="作業系統">作業系統</a>的核心正式用C語言改寫，這是C語言第一次應用在作業系統的核心編寫上。
</p>, <p>1975年C語言開始移植到其他機器上使用。<span class="ilh-all" data-foreign-title="Stephen C. Johnson" data-lang-code="en" data-lang-name="英語" data-orig-title="史蒂芬·強生"><span class="ilh-page"><a class="new" href="/w/index.php?title=%E5%8F%B2%E8%92%82%E8%8A%AC%C2%B7%E5%BC%B7%E7%94%9F&amp;action=edit&amp;redlink=1" title="史蒂芬·強生（頁面不存在）">史蒂芬·強生</a></span><span class="noprint ilh-comment">（<span class="ilh-lang">英語</span><span class="ilh-colon">：</span><span class="ilh-link"><a class="extiw" href="https://en.wikipedia.org/wiki/Stephen_C._Johnson" title="en:Stephen C. Johnson"><span dir="auto" lang="en">Stephen C. Johnson</span></a></span>）</span></span>實現了一套「<a href="/wiki/%E5%8F%AF%E7%A7%BB%E6%A4%8DC%E7%B7%A8%E8%AD%AF%E5%99%A8" title="可移植C編譯器">可移植編譯器</a>」，這套編譯器修改起來相對容易，並且可以為不同的機器生成代碼。從那時起，C在大多數電腦上被使用，從最小的微型電腦到與CRAY-2超級電腦。C語言很規範，即使沒有一份正式的標準，你也可以寫出C程式，這些程式無須修改就可以執行在任何支援C語言和最小執行時環境的電腦上。
</p>, <p>C最初在小型機器上實現，並且繼承了一系列小語種程式語言的特點；與功能相比，C的設計者更傾向於簡單和優雅。此外，從一開始，C語言就是為系統級編程而設計，程式的執行效率至關重要，因此，C語言與真實機器能力的良好匹配也就不足為奇。例如，C語言為典型硬體所直接支援的物件：<a class="mw-disambig" href="/wiki/%E5%AD%97%E7%AC%A6" title="字元">字元</a>，<a href="/wiki/%E6%95%B4%E6%95%B0" title="整數">整數</a>（也許有多種大小），以及<a href="/wiki/%E6%B5%AE%E7%82%B9%E6%95%B0" title="浮點數">浮點數</a>（同樣可能有多種大小）提供了相應的基本資料類型。
</p>, <p>1978年，<a href="/wiki/%E4%B8%B9%E5%B0%BC%E6%96%AF%C2%B7%E9%87%8C%E5%A5%87" title="丹尼斯·里奇">丹尼斯·里奇</a>和<a href="/wiki/%E5%B8%83%E8%90%8A%E6%81%A9%C2%B7%E6%9F%AF%E6%9E%97%E6%BC%A2" title="布萊恩·柯林漢">布萊恩·柯林漢</a>合作出版了《<a href="/wiki/C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80_(%E4%B9%A6)" title="C程式設計語言 (書)">C程式設計語言</a>》的第一版。書中介紹的C語言標準也被C語言程式設計師稱作「K&amp;R C」（柯里C），第二版的書中也包含了一些<a href="/wiki/ANSI_C" title="ANSI C">ANSI C</a>的標準。
</p>, <p>K&amp;R C主要引入了以下語言特性：
</p>, <p>即使在後來<a href="/wiki/ANSI_C" title="ANSI C">ANSI C標準</a>被提出的許多年後，K&amp;R C仍然是許多編譯器的最低標準要求，許多老舊的編譯仍然運行K&amp;R C的標準。
</p>, <p>1989年，C語言被<a href="/wiki/%E7%BE%8E%E5%9C%8B%E5%9C%8B%E5%AE%B6%E6%A8%99%E6%BA%96%E5%8D%94%E6%9C%83" title="美國國家標準協會">美國國家標準協會</a>（ANSI）標準化，編號為ANSI X3.159-1989。這個版本又稱為C89。標準化的一個目的是擴充K&amp;R C，增加了一些新特性。
</p>, <p>1990年，<a class="mw-redirect" href="/wiki/%E5%9B%BD%E9%99%85%E6%A0%87%E5%87%86%E5%8C%96%E7%BB%84%E7%BB%87" title="國際標準化組織">國際標準化組織</a>（ISO）成立 ISO/IEC JTC1/SC22/WG14 工作群組，來規定國際標準的C語言，通過對ANSI標準的少量修改，最終製定了 ISO 9899:1990，又稱為C90。隨後，ANSI亦接受國際標準C，並不再發展新的C標準。
</p>, <p>K&amp;R C語言到ANSI/ISO標準C語言的改進包括：
</p>, <p>WG14工作小組之後又於1994年，對1985年頒布的標準做了兩處技術修訂（缺陷修復）和一個補充（擴充）。下面是 1994 年做出的所有修改：
</p>, <p>在ANSI的標準確立後，C語言的規範在一段時間內沒有大的變動，然而C++在自己的標準化建立過程中繼續發展壯大。《標準修正案一》在1994年為C語言建立了一個新標準，但是只修正了一些C89標準中的細節和增加更多更廣的國際字元集支援。不過，這個標準引出了1999年<a class="new" href="/w/index.php?title=ISO_9899:1999&amp;action=edit&amp;redlink=1" title="ISO 9899:1999（頁面不存在）">ISO 9899:1999</a>的發表。它通常被稱為C99。C99被ANSI於2000年3月採用。
</p>, <p>在C99中包括的特性有：
</p>, <p>但是各個公司對C99的支援所表現出來的興趣不同。當GCC和其它一些商業編譯器支援C99的大部分特性的時候<sup class="reference" id="cite_ref-4"><a href="#cite_note-4">[4]</a></sup>，<a href="/wiki/%E5%BE%AE%E8%BD%AF" title="微軟">微軟</a>和<a href="/wiki/Borland" title="Borland">Borland</a>卻似乎對此不感興趣。
</p>, <p>2011年12月8日，ISO正式發布了新的C語言的新標準C11，之前被稱為C1X，官方名稱為<a href="/wiki/C11" title="C11">ISO/IEC 9899:2011</a>。新的標準提高了對C++的相容性，並增加了一些新的特性。這些新特性包括泛型巨集、多執行緒、帶邊界檢查的函式、匿名結構等。
</p>, <p>C18沒有引入新的語言特性，只對C11進行了補充和修正。
</p>, <p>下面是一個在標準輸出裝置（stdout）上列印出 "<a class="mw-redirect" href="/wiki/Hello_World%E7%A8%8B%E5%BA%8F" title="Hello World程式">Hello, world!</a>" 字串的簡單程式。類似的程式，通常作為初學程式語言時的第一個程式： 
</p>, <p>C語言由函式和變數組成，C的函式就像是<a href="/wiki/Fortran" title="Fortran">Fortran</a>中的子程式和函式。
</p>, <p>在C語言中，程式從 <a class="mw-redirect" href="/wiki/%E4%B8%BB%E5%87%BD%E5%BC%8F#C/C++" title="主函式"><code>main</code></a> 開始執行。<code>main</code> 函式通過呼叫和控制其他函式進行工作。例如上面的<code>printf</code>。程式設計師可以自己寫函式，或從庫中呼叫函式。在上面的<code>return 0;</code> 使得 <code>main</code> 返回一個值給呼叫程式的<a href="/wiki/%E6%AE%BC%E5%B1%A4" title="殼層">殼層</a>，表明程式是否成功執行。
</p>, <p>一個C語言的函式由返回值、函式名、參數列和函式體組成。函式體的語法和其它的複合的語句部分是一樣的。
</p>, <p>C語言中的複合語句（或稱<b>語句塊</b>）的格式為：
</p>, <p>複合語句可以使得幾個語句從文法上變成一個語句。
</p>, <p>有時必須使用複合語句，否則會產生錯誤。例如，在運用迴圈語句的時候，如果迴圈體（即迴圈中執行部分）包含多個語句（以分號隔開），則必須使用花括號將他們合併成一個複合語句。如果不這麼做，系統僅把第一個分號前的內容看做迴圈體。
</p>, <p>需要注意的是，部分C編譯器並不支援在任意位置使用複合語句。
</p>, <p>C語言有兩種條件語句形式，分別是<tt>if</tt>和<tt>switch</tt>。
</p>, <p>If 的格式如下：
</p>, <p>運算式的值非零表示條件為真；如果條件為假，程式將跳過<tt>if</tt>處的語句，直接執行<tt>if</tt>後面的語句。但是如果<tt>if</tt>後面有<tt>else</tt>，則當條件為假時，程式跳到<tt>else</tt>處執行。<tt>if</tt>和<tt>else</tt>後面的語句可以是另個<tt>if</tt>語句，這種套疊式的結構，允許更複雜的邏輯控制流程得以實現。在一般情況下，<tt>else</tt>一定與最接近的<tt>if</tt>成對，因此常用括弧<tt><b>{}</b></tt>越過此限制。比較下面兩種情況：
</p>, <p>要注意這裡的縮排和換行只用於方便閱讀。編譯器並不會根據縮排層級猜測 if 和 else 的對應關係。
</p>, <p><tt>switch</tt>通常用於對幾種有明確值的條件進行控制。它要求的條件值通常是整數或字元。與<tt>switch</tt>搭配的條件轉移是<tt>case</tt>。使用<tt>case</tt>後面的標值，控制程式將跳到滿足條件的<tt>case</tt>處一直往下執行，直到語句結束或遇到<tt>break</tt>。通常可以使用<tt>default</tt>把其他例外的情況包含進去。如果<tt>switch</tt>語句中的條件不成立，控制程式將跳到<tt>default</tt>處執行；如果省略<tt>default</tt>子句，則直接執行下一語句。<tt>switch</tt>是可以巢狀的。
</p>, <p>簡單的條件判斷也可用?:
</p>, <p>C語言有三種形式的循環語句：
</p>, <p>在<tt>while</tt>和<tt>for</tt>中，語句將執行到表達式的值為零時結束。在<tt>do...while</tt>語句中，循環將至少被執行一次。這三種循環結構可以互相轉化：
</p>, <p>如果<b>語句</b>中不使用continue語句的話，相當於
</p>, <p>當循環條件一直為真時，將產生<a href="/wiki/%E7%84%A1%E7%AA%AE%E8%BF%B4%E5%9C%88" title="無窮迴圈">無窮迴圈</a>。
</p>, <p>跳轉語句包括四種：<tt>goto，continue，break和return</tt>。
</p>, <p><tt>goto</tt>語句是無條件轉移語句，且標記必須在當前函式中定義，使用「標記:」的格式定義。程式將跳到標記處繼續執行。由於<tt>goto</tt>（特別是向回 goto 和長距離的 goto）容易產生閱讀上的困難，所以對新手應該儘量少用。<a href="/wiki/GCC" title="GCC">GCC</a> 編譯器拓展支援對指標 <tt>goto</tt>和巨集內 goto，一定程度上增強了 goto 的可讀性。
</p>, <p><br/>
<tt>continue</tt>語句用在迴圈語句中，作用是結束當前一輪的迴圈，馬上開始下一輪迴圈。
</p>, <p><tt>break</tt>語句用在迴圈語句或<tt>switch</tt>中，作用是結束當前迴圈，跳到循環體外繼續執行。但是使用<tt>break</tt>只能跳出一層迴圈。在要跳出多重迴圈時，可以使用<tt>goto</tt>使得程式更為簡潔。
</p>, <p>當一個函式執行結束後要返回一個值時，使用<tt>return</tt>。<tt>return</tt>可以跟一個運算式或變數。如果<tt>return</tt>後面沒有值，將執行不返回值。
</p>, <p>比較特別的是，位元右移（&gt;&gt;）運算子可以是<i>算術</i>（左端補最高有效位）或是<i>邏輯</i>（左端補 0）位移。例如，將 11100011 右移 3 位元，算術右移後成為 11111100，邏輯右移則為 00011100。因算術位元右移較適於處理帶負號整數，所以幾乎所有的編譯器都是算術位元右移<sup class="reference" id="cite_ref-5"><a href="#cite_note-5">[5]</a></sup>。
</p>, <p>運算子的優先級從高到低大致是：單目運算子、算術運算子、關係運算子、邏輯運算子、條件運算子、設定運算子（=）和逗號運算子。
</p>, <p><i>注意：以下是典型的資料位長和範圍。編譯器可能使用不同的資料位長和範圍。請參考具體的參考手冊。</i>
</p>, <p>在標準標頭檔<tt>limits.h</tt> 和 <tt>float.h</tt>中說明了基礎資料的長度。<tt>float，double和long double</tt>的範圍就是在<a href="/wiki/IEEE_754" title="IEEE 754">IEEE 754</a>標準中提及的典型資料。
</p>, <p>結構資料類型允許構造由多個基礎資料類型組合而成的複雜結構，結構資料類型為物件導向的藍本。以下的結構資料類型通過指標實現了二元樹結構：
</p>, <p>為結構資料類型定義變數時通常會用到動態記憶體分配：
</p>, <p>由於C語言不具備自動垃圾收集（Garbage Collection）功能，使用完畢後呼叫<code>free(treePtr)</code>來釋放之前通過<code>malloc(size)</code>分配的記憶體。詳見以下指標章節。
</p>, <p>如果一個變數名後面跟著一個有數字的中括弧，這個聲明就是<a class="mw-redirect" href="/wiki/%E9%99%A3%E5%88%97" title="陣列">陣列</a>聲明。字串也是一種陣列，它們以ASCII的NUL作為陣列的結束。要特別注意的是，方括內的索引值是從<b>0</b>算起的。
</p>, <p>例如：
</p>, <p>上面最後一個例子建立了一個陣列，但也可以把它看成是一個多維陣列。注意陣列的下標從0開始。這個陣列的結構如下：
</p>, <p>例子中notfull建立了一個3*3的二維陣列，初始化時有些元素並未賦值。如下：
</p>, <p>根據C標準的規定，在存在初始化列表時，如果初始化列表中未提供對所有元素的初始化，則剩餘元素會被預設初始化，並使用與靜態變數相同的初始化規則<sup class="reference" id="cite_ref-7"><a href="#cite_note-7">[7]</a></sup>。
</p>, <p>如果一個變數聲明時在前面使用 * 號，表明這是個指標型變數。換句話說，該變數儲存一個位址，而 *（此處特指<b>單目運算子 *</b>，下同。C語言中另有雙目運算子 * 表示乘） 則是取內容運算子，意思是取這個記憶體位址里儲存的內容。把這兩點結合在一起，可將 <code>int *a;</code>看作是 「*a 解得的內容類型為 int」，對更複雜的聲明也如此<span id="noteTag-cite_ref-sup"><sup class="reference" id="cite_ref-8"><a href="#cite_note-8">[註 1]</a></sup></span>。指標是 C 語言區別於其他同時代高階語言的主要特徵之一。
</p>, <p>指標不僅可以是變數的位址，還可以是陣列、陣列元素、函式的位址。通過指標作為形式參數可以在函式的呼叫過程得到一個以上的返回值（不同於<code>return z</code>這樣的僅能得到一個返回值。
</p>, <p>指標是一把雙刃劍，許多操作可以通過指標自然的表達，但是不正確的或者過分的使用指標又會給程式帶來大量潛在的錯誤。
</p>, <p>例如：
</p>, <p>儲存在指標中的位址所指向的數值在程式中可以由 * 讀取。例如，在第一個例子中， <tt>*pi</tt> 是一個整型資料。這叫做參照一個指標。
</p>, <p>另一個運算子 <tt>&amp;</tt>，叫做取位址運算子，它將返回一個變數、陣列或函式的儲存位址。因此，下面的例子：
</p>, <p><tt>i</tt> 和 <tt>*pi</tt> 在程式中可以相互替換使用，直到 <tt>pi</tt> 被改變成指向另一個變數的位址。
</p>, <p>當指標指向結構體時，可以使用運算子 -&gt; 代替 *和. 的作用，如 <tt>(*p).m</tt> 與 <tt>p-&gt;m</tt> 等效。
</p>, <p>C語言的<b>字串</b>其實就是char型陣列，所以使用字串並不需要參照庫。然而C標準庫確實包含了用於對字串進行操作的函式，使得它們看起來就像字串而不是陣列。使用這些函式需要參照<a class="mw-redirect" href="/wiki/%E6%A8%99%E9%A0%AD%E6%AA%94" title="標頭檔">標頭檔</a><tt><a href="/wiki/String.h" title="String.h">string.h</a></tt>。
</p>, <p>在C語言中，輸入和輸出是經由標準函式庫中的一組函式來實現的。在ANSI/ISO C中，這些函式被定義在標頭檔<tt>stdio.h</tt>中。
</p>, <p>有三個標準輸入／輸出是標準I/O庫預先定義的：
<tt>
</tt></p>, <p>下面的這個例子顯示了一個過濾程式（filter program）是怎樣構成的。
</p>, <p>C語言的基本結構單位是函式。系統首先呼叫 <a class="mw-redirect" href="/wiki/%E4%B8%BB%E5%87%BD%E5%BC%8F#C/C++" title="主函式">main函式（主函式）</a>，通過函式的巢狀呼叫，再呼叫其他函式。函式可以是系統內建的函式，也可以是用戶定義的函式。C語言中，不允許函式巢狀定義。
</p>, <p>C語言的特色之一是：程式設計師必須親自處理記憶體的分配細節。
</p>, <p>C語言使用棧（Stack）來儲存函式返回位址／堆疊框基址、完成函式的參數傳遞和函式局部變數的儲存。
如果程式需要在執行的過程中動態分配記憶體，可以利用<a class="mw-redirect" href="/wiki/%E5%A0%86" title="堆">堆</a>（Heap）來實現。
</p>, <p>基本上C程式的元素儲存在記憶體的時候有3種分配策略：
</p>, <p>如果一個變數聲明為<a href="/wiki/%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F" title="全域變數">全域變數</a>或者是函式的<a href="/wiki/%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F" title="靜態變數">靜態變數</a>，這個變數的儲存將使用靜態分配方式。靜態分配的記憶體一般會被編譯器放在<a href="/wiki/%E6%95%B0%E6%8D%AE%E6%AE%B5" title="資料段">資料段</a>或<a href="/wiki/%E4%BB%A3%E7%A0%81%E6%AE%B5" title="代碼段">代碼段</a>來儲存，具體取決於實現。這樣做的前提是，在<b>編譯時</b>就必須確定變數的大小。
以IA32的x86平台及gcc編譯器為例，全域及靜態變數放在資料段的低階；全域及靜態常數放在代碼段的高階。
</p>, <p>函式的自動局部變數應該隨著函式的返回會自動釋放（失效），這個要求在一般的體系中都是利用棧（Stack）來滿足的。相比於靜態分配，這時候，就不必絕對要求這個變數在<b>編譯時</b>就必須確定變數的大小，<b>執行時</b>才決定也不遲，但是C89仍然要求在<b>編譯時</b>就要確定，而C99放鬆了這個限制。但無論是C89還是C99，都不允許一個已經分配的自動變數執行時改變大小。
</p>, <p>所以說<b>C函式永遠不應該返回一個局部變數的位址</b>。
</p>, <p>要指出的是，自動分配也屬於動態分配，甚至可以用alloca函式來像分配堆（Heap）一樣進行分配，而且釋放是自動的。
</p>, <p>還有一種更加特殊的情況，變數的大小在執行時有可能改變，或者雖然單個變數大小不變，變數的數目卻有很大彈性，不能靜態分配或者自動分配，這時候可以使用<a class="mw-redirect" href="/wiki/%E5%A0%86" title="堆">堆</a>（Heap）來滿足要求。ANSI C定義的堆操作函式是malloc、calloc、realloc和free。
</p>, <p>使用<a class="mw-redirect" href="/wiki/%E5%A0%86" title="堆">堆</a>（Heap）記憶體將帶來額外的開銷和風險。
</p>, <p>C語言的特色之一是：語言不負責記憶體邊界檢查。此特性容易導致<a href="/wiki/%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA" title="緩衝區溢位">緩衝區溢位</a>問題。
</p>, <p>C語言的標準文件要求了一個平台移植C語言的時候至少要實現的一些功能和封裝的集合，稱為「標準庫」，標準庫的聲明頭部通過<a href="/wiki/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8" title="前置處理器">前置處理器</a>命令#include進行參照。 
</p>, <p>在C89標準中：
</p>, <p>在94年的修正版中 
</p>, <p><tt>
</tt></p>, <p><tt></tt>
</p>, <p>在C99中增加了六個函式庫 
</p>, <p><tt>
</tt></p>, <p><tt></tt>
</p>, <p>以上是C語言的標準。各個系統各自又對C庫函式進行的各種擴充，就浩如煙海了。如<a class="new" href="/w/index.php?title=POSIX_C&amp;action=edit&amp;redlink=1" title="POSIX C（頁面不存在）">POSIX C</a>、<a class="mw-redirect" href="/wiki/GNU_C" title="GNU C">GNU C</a>等。
</p>, <p>工具軟體可以幫助程式設計者避免一些程式中潛藏或容易出現的問題，例如常會造成程式未預期動作或是執行期錯誤的程式碼。
</p>, <p>許多語言都有自動原始碼檢查及審計工具，C語言也有類似工具，像是<a href="/wiki/Lint" title="Lint">Lint</a>。可以在程式剛寫好時用Lint找出可能有問題的程式，通過Lint後再用C編譯器進行編譯，許多編譯器也可以設定是否要針對一些可能有問題的程式碼提出警告。<a href="/wiki/MISRA_C" title="MISRA C">MISRA C</a>是一套針對<a href="/wiki/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F" title="嵌入式系統">嵌入式系統</a>的法則，可主要也是避免一些可能有問題的程式碼。
</p>, <p>也有一些編譯器、程式庫或作業系統可以處理一些非標準C語言的功能，例如邊界值檢查、<a class="mw-redirect" href="/wiki/%E7%BC%93%E5%AD%98%E6%BA%A2%E5%87%BA" title="緩衝區溢位">緩衝區溢位</a>偵測、<a href="/wiki/%E5%BA%8F%E5%88%97%E5%8C%96" title="序列化">序列化</a>及<a href="/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)" title="垃圾回收 (計算機科學)">自動垃圾回收</a>功能。
</p>, <p>使用像<a href="/wiki/Valgrind" title="Valgrind">Valgrind</a>或<span class="ilh-all" data-foreign-title="Purify" data-lang-code="en" data-lang-name="英語" data-orig-title="IBM Rational Purify"><span class="ilh-page"><a class="new" href="/w/index.php?title=IBM_Rational_Purify&amp;action=edit&amp;redlink=1" title="IBM Rational Purify（頁面不存在）">IBM Rational Purify</a></span><span class="noprint ilh-comment">（<span class="ilh-lang">英語</span><span class="ilh-colon">：</span><span class="ilh-link"><a class="extiw" href="https://en.wikipedia.org/wiki/Purify" title="en:Purify"><span dir="auto" lang="en">Purify</span></a></span>）</span></span>等軟體工具，或者連結有特別<a class="new" href="/w/index.php?title=Malloc&amp;action=edit&amp;redlink=1" title="Malloc（頁面不存在）">malloc</a>函式的程式庫，有助於找出一些運行期記憶體使用的問題。
</p>, <p>以下是C語言的保留關鍵字：<sup class="reference" id="cite_ref-9"><a href="#cite_note-9">[8]</a></sup>
</p>, <p>「void main()」的用法並不是任何標準制定的<sup class="reference" id="cite_ref-10"><a href="#cite_note-10">[9]</a></sup><sup class="reference" id="cite_ref-11"><a href="#cite_note-11">[10]</a></sup>。 C語言標準語法是「int main()」，任何實現都必須支援<code>int main(void) { /* ... */ }</code>和<code>int main(int argc, char* argv[]) { /* ... */ }</code><sup class="reference" id="cite_ref-12"><a href="#cite_note-12">[11]</a></sup>。 在 C++ 標準中，main的標準型態應是int，否則類型是由實現定義的。任何實現都必須支援<code>int main() { /* ... */ }</code>和<code>int main(int argc, char* argv[]) { /* ... */ }</code><sup class="reference" id="cite_ref-13"><a href="#cite_note-13">[12]</a></sup>。
</p>, <p class="mw-empty-elt">
</p>]