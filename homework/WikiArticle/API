[<p>與網際網路相連的端系統提供了一個<b>應用程式介面</b>（英語：<span lang="en"><b>A</b>pplication <b>P</b>rogramming <b>I</b>nterface</span>，縮寫：<span lang="en"><b>API</b></span>；又稱為<b>應用程式編程介面</b>）是<a href="/wiki/%E8%BD%AF%E4%BB%B6" title="軟體">軟體</a>系統不同組成部分銜接的約定。 
</p>, <p>API規定了執行在一個端系統上的軟體請求網際網路基礎設施向執行在另一個端系統上的特定目的地軟體交付資料的方式。比方說：Alice使用郵政服務向Bob發一封信，郵政服務要求Alice將信放進信封中；在信封的中央寫上Bob的全名、位址和郵政編碼；封上信封；在信封的右上角貼上郵票；最後將信封丟進電子信箱里；郵政服務有自己的「郵政服務API」或一套規則，Alice必須這麼遵循，郵政服務才能把信寄給Bob；同理，網際網路也有一個傳送資料的程式必須遵循的API，使網際網路向接收資料的程式交付資料。---來源於：《電腦網路-自頂向下學習法》
</p>, <p>由於近年來軟體的規模日益龐大，常常需要把複雜的系統劃分成小的組成部分，編程介面的設計十分重要。程式設計的實踐中，編程介面的設計首先要使軟體系統的職責得到合理劃分。良好的<a class="mw-disambig" href="/wiki/%E6%8E%A5%E5%8F%A3" title="介面">介面</a>設計可以降低系統各部分的相互依賴，提高組成單元的<a class="mw-redirect" href="/wiki/%E5%85%A7%E8%81%9A%E5%8A%9B_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)" title="內聚力 (計算機科學)">內聚性</a>，降低組成單元間的<a class="mw-redirect" href="/wiki/%E8%80%A6%E5%90%88%E5%8A%9B_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)" title="耦合力 (計算機科學)">耦合</a>程度，從而提高系統的可維護性和可延伸性。
</p>, <p>應用程式介面為：「『電腦<a href="/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F" title="作業系統">作業系統</a>（<span lang="en">Operating system</span>）』或『<a href="/wiki/%E5%87%BD%E5%BC%8F%E5%BA%AB" title="函式庫">程式函式庫</a>』提供給應用程式呼叫使用的程式碼」。其主要目的是讓應用程式開發人員得以呼叫一組<a class="mw-redirect" href="/wiki/%E5%87%BD%E6%95%B0_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)" title="函式 (電腦科學)">常式</a>功能，而無須考慮其底層的原始碼為何、或理解其內部工作機制的細節。API本身是<a class="new" href="/w/index.php?title=%E6%8A%BD%E8%B1%A1_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)&amp;action=edit&amp;redlink=1" title="抽象 (計算機科學)（頁面不存在）">抽象</a>的，它僅定義了一個<a class="mw-redirect" href="/wiki/%E4%BB%8B%E9%9D%A2_(%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8)" title="介面 (電腦科學)">介面</a>，而不涉及應用程式在實際實現過程中的具體操作。
</p>, <p>例如，圖形庫中的一組API定義了繪製<a class="mw-disambig" href="/wiki/%E6%8C%87%E6%A8%99" title="指標">指標</a>的方式，可於圖形輸出裝置上顯示指標。當應用程式需要指標功能時，可在參照、<a class="mw-redirect" href="/wiki/%E7%BC%96%E8%AF%91" title="編譯">編譯</a>時連結到這組API，而執行時就會呼叫此API的實現（庫）來顯示指標。
</p>, <p>應用程式介面可以是一組數量上千、極其複雜的函式和副程式，可讓程式設計師做很多工作，譬如「讀取檔案」、「顯示選單」、「在視窗中顯示網頁」等等。<a href="/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F" title="作業系統">作業系統</a>的API可用來分配<a class="mw-disambig" href="/wiki/%E8%A8%98%E6%86%B6%E9%AB%94" title="記憶體">記憶體</a>或讀取<a href="/wiki/%E6%AA%94%E6%A1%88" title="檔案">檔案</a>。許多系統應用程式藉由API介面來實現，像是圖形系統、資料庫、網路<a href="/wiki/Web%E6%9C%8D%E5%8A%A1" title="Web服務">Web服務</a>，甚至是線上遊戲。
</p>, <p>應用程式介面有諸多不同設計。用於快速執行的介面通常包括<a class="mw-redirect" href="/wiki/%E5%87%BD%E6%95%B0_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)" title="函式 (電腦科學)">函式</a>、<a class="mw-redirect" href="/wiki/%E5%B8%B8%E9%87%8F" title="常數">常數</a>、<a class="mw-redirect" href="/wiki/%E5%8F%98%E9%87%8F" title="變數">變數</a>與<a href="/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84" title="資料結構">資料結構</a>。也有其它方式，如通過<a class="mw-redirect" href="/wiki/%E8%A7%A3%E9%87%8A%E5%99%A8" title="直譯器">直譯器</a>，或是提供抽象層以遮蔽同API實現相關的資訊，確保使用API的代碼無需更改而適應實現變化。
</p>, <p>應用程式介面經常是<a href="/wiki/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%8C%85" title="軟體開發套件">軟體開發套件</a>（SDK）的一部分。
</p>, <p>API又分為（<a class="mw-redirect" href="/wiki/Windows" title="Windows">Windows</a>、<a href="/wiki/Linux" title="Linux">Linux</a>、<a class="mw-redirect" href="/wiki/Unix" title="Unix">Unix</a>等系統的）系統級API，及非作業系統級的自訂API。作為一種有效的代碼封裝模式，微軟<a class="mw-redirect" href="/wiki/Windows" title="Windows">Windows</a>的API開發模式已經為許多商業應用開發的公司所借鑑，並開發出某些商業應用系統的API函式予以發布，方便第三方進行功能擴充。如<a href="/wiki/Google" title="Google">Google</a>、<a class="mw-redirect" href="/wiki/%E8%8B%B9%E6%9E%9C%E7%94%B5%E8%84%91%E5%85%AC%E5%8F%B8" title="蘋果電腦公司">蘋果電腦公司</a>，以及諾基亞等手機開發的API等等。
</p>, <p>URL： <a class="external free" href="http://api.yinhangkadata.com/BankCard" rel="nofollow">http://api.yinhangkadata.com/BankCard</a>
card：6222352812809642
key：866a0b5db38e8ac53e07e21bb7e7aa10
</p>]