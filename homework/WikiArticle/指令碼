[<p><b>手稿語言</b>（英語：<span lang="en">Scripting language</span>）是為了縮短傳統的「編寫、編譯、連結、執行」（edit-compile-link-run）過程而建立的電腦<a class="mw-redirect" href="/wiki/%E7%BC%96%E7%A8%8B" title="編程">編程</a>語言。早期的手稿語言經常被稱為<a href="/wiki/%E6%89%B9%E5%A4%84%E7%90%86" title="批次處理">批次處理</a>語言或<a class="new" href="/w/index.php?title=%E5%B7%A5%E4%BD%9C%E6%8E%A7%E5%88%B6%E8%AF%AD%E8%A8%80&amp;action=edit&amp;redlink=1" title="工作控制語言（頁面不存在）">工作控制語言</a>。一個指令碼通常是直譯執行而非編譯。指令碼語言通常都有簡單、易學、易用的特性，目的就是希望能讓<a class="mw-redirect" href="/wiki/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%E5%B8%AB" title="程式設計師">程式設計師</a>快速完成<a href="/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F" title="電腦程式">程式</a>的編寫工作。而<a class="mw-redirect" href="/wiki/%E5%AE%8F%E8%AF%AD%E8%A8%80" title="宏語言">巨集語言</a>則可視為指令碼語言的分支，兩者也有實質上的相同之處。
</p>, <p>雖然許多手稿語言都超越了電腦簡單任務自動化的領域，成熟到可以編寫精巧的程式，但仍然還是被稱為指令碼。幾乎所有電腦系統的各個層次都有一種手稿語言。包括作業系統層，如<a class="mw-redirect" href="/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%B8%B8%E6%88%8F" title="電腦遊戲">電腦遊戲</a>，<a href="/wiki/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F" title="網路應用程式">網路應用程式</a>，字處理文件，網路<a href="/wiki/%E8%BD%AF%E4%BB%B6" title="軟體">軟體</a>等。在許多方面，進階<a href="/wiki/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80" title="程式語言">程式語言</a>和<b>手稿語言</b>之間互相交叉，二者之間沒有明確的界限。
</p>, <p>指令碼語言是一種<a class="mw-redirect" href="/wiki/%E9%9B%BB%E8%85%A6%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80" title="電腦程式語言">電腦程式語言</a>，因此也能讓開發者藉以編寫出讓電腦聽命行事的程式。以簡單的方式快速完成某些複雜的事情通常是創造手稿語言的重要原則，基於這項原則，使得手稿語言通常比<a class="mw-redirect" href="/wiki/C%E8%AA%9E%E8%A8%80" title="C語言">C語言</a>、<a class="mw-redirect" href="/wiki/C%2B%2B%E8%AF%AD%E8%A8%80" title="C++語言">C++語言</a>或 <a href="/wiki/Java" title="Java">Java</a>之類的<span class="ilh-all" data-foreign-title="System programming language" data-lang-code="en" data-lang-name="英語" data-orig-title="系統程式語言"><span class="ilh-page"><a class="new" href="/w/index.php?title=%E7%B3%BB%E7%B5%B1%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80&amp;action=edit&amp;redlink=1" title="系統程式語言（頁面不存在）">系統程式語言</a></span><span class="noprint ilh-comment">（<span class="ilh-lang">英語</span><span class="ilh-colon">：</span><span class="ilh-link"><a class="extiw" href="https://en.wikipedia.org/wiki/System_programming_language" title="en:System programming language"><span dir="auto" lang="en">System programming language</span></a></span>）</span></span>要簡單容易，也讓手稿語言另有一些屬於手稿語言的特性：<sup class="reference" id="cite_ref-1"><a href="#cite_note-1">[1]</a></sup>
</p>, <p>一個指令碼可以使得本來要用<a class="mw-redirect" href="/wiki/%E9%94%AE%E7%9B%98" title="鍵盤">鍵盤</a>進行的相互式操作自動化。一個<a class="mw-redirect" href="/wiki/Shell" title="Shell">Shell</a>指令碼主要由原本需要在<a class="mw-redirect" href="/wiki/%E5%91%BD%E4%BB%A4%E8%A1%8C" title="命令行">命令行</a>輸入的命令組成，或在一個<a href="/wiki/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8" title="文字編輯器">文字編輯器</a>中，用戶可以使用指令碼來把一些常用的操作組合成一組序列。主要用來書寫這種指令碼的語言叫做手稿語言。很多手稿語言實際上已經超過簡單的用戶命令序列的指令，還可以編寫更複雜的程式。
</p>, <p>電腦語言是為了各種目的和任務而開發的，一個常見任務就是把各種不同的已有組件連接起來以完成相關任務。大多手稿語言共性是：良好的快速開發，有效率的執行，直譯而非編譯執行，和其它語言編寫的程式組件之間通信功能很強大。
</p>, <p>許多手稿語言用來執行一次性任務，尤其是系統管理方面。它可以把服務組件粘合起來，因此被廣泛用於GUI建立或者命令行，<a href="/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F" title="作業系統">作業系統</a>通常提供一些預設的手稿語言，即通常所謂shell手稿語言。
</p>, <p>指令碼通常以文字（如<a href="/wiki/ASCII" title="ASCII">ASCII</a>）儲存，只在被呼叫時進行直譯或編譯。
</p>, <p>有些指令碼是為了特定領域設計的，但通常指令碼都可以寫更通用的指令碼。在大型專案中經常把指令碼和其它低階程式語言一起使用，各自發揮優勢解決特定問題。指令碼經常用於設計互動通信，它有許多可以單獨執行的命令，可以做很進階的操作，（如在傳統的<a href="/wiki/Unix_shell" title="Unix shell">Unix shell</a>（sh）中，大多操作就是程式本身。）
</p>, <p>這些進階命令簡化了代碼編寫過程。諸如記憶體自動管理和溢位檢查等效能問題可以不用考慮。在更低階或非手稿語言中，<a class="mw-redirect" href="/wiki/%E5%86%85%E5%AD%98" title="記憶體">記憶體</a>及變數管理和資料結構等耗費人工，為解決一個給定問題需要大量代碼，當然這樣能夠獲得更為細緻的控制和最佳化。指令碼缺少最佳化程式以提速或者降低<a class="mw-redirect" href="/wiki/%E5%86%85%E5%AD%98" title="記憶體">記憶體</a>的伸縮性。
</p>, <p>綜上所述，指令碼編程速度更快，且指令碼檔案明顯小於如同類C程式檔案。這種靈活性是以執行效率為代價的。指令碼通常是直譯執行的，速度可能很慢，且執行時更耗記憶體。在很多案例中，如編寫一些數十行的小指令碼，它所帶來的編寫優勢就遠遠超過了執行時的劣勢，尤其是在目前程式設計師工資趨高和硬體成本趨低時。
</p>, <p>然而，在指令碼和傳統程式語言之間的界限越來越模糊，尤其是在一系列新語言及其整合常出現時。在一些手稿語言中，有經驗的程式設計師可以進行大量最佳化工作。在大多現代系統中通常有多種合適的手稿語言可以選擇，所以推薦使用多種語言（包括C或者組合語言）編寫一種指令碼。
</p>, <p>此類指令碼用於自動化工作控制，即啟動和控制系統程式的行為。大多的手稿語言直譯器也同時是命令行介面，如<a href="/wiki/Unix_shell" title="Unix shell">Unix shell</a>和MS-DOS COMMAND.COM。其他如AppleScript，可以為系統增加指令碼環境，但沒有命令行介面。
</p>, <p>具體包括：
</p>, <p><a class="mw-redirect" href="/wiki/GUI" title="GUI">GUI</a>出現帶來一種專業的控制電腦的手稿語言。它在用戶和圖形介面，<a href="/wiki/%E9%81%B8%E5%96%AE" title="選單">選單</a>，按鈕等之間互動。它經常用來自動化重複性動作，或設定一個標準狀態。理論上它可以用來控制執行於基於GUI的電腦上的所有<a href="/wiki/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F" title="應用程式">應用程式</a>，但實際上這些語言是否被支援還要看應用程式和作業系統本身。當通過鍵盤進行互動時，這些語言也被稱為巨集語言。
</p>, <p>具體包括：
</p>, <p>許多大型的應用程式都包括根據用戶需求而客製化的慣用手稿語言。同樣地，許多電腦遊戲系統使用一種自訂手稿語言來表現NPC（non-player character,non-playable character,non-player class）和遊戲環境的預編程動作。
</p>, <p>此類語言通常是為一個單獨的應用程式所設計，雖然它們貌似一些通用語言（如QuakeC, modeled after C），但它們有自訂的功能。
</p>, <p>具體包括：
</p>, <p>應用程式客製化的手稿語言中有一種重要的類別，用於提供WEB頁面的自訂功能。它專業處理網際網路通信，使用<a href="/wiki/%E7%BD%91%E9%A1%B5%E6%B5%8F%E8%A7%88%E5%99%A8" title="網頁瀏覽器">網頁瀏覽器</a>作為使用者介面。當然，大多現代WEB程式語言都比較強大可以做一些通用編程。
</p>, <p>具體包括：
</p>, <p>處理基於文字的記錄是手稿語言最早的用處之一。如Unix's awk最早是設計來幫助系統管理員處理呼叫<a href="/wiki/UNIX" title="UNIX">UNIX</a>基於文字的組態和LOG檔案。Perl最早是用來產生報告的，現在它已經成了全面成熟的語言。
</p>, <p>具體包括：
</p>, <p>一些語言，比如Perl，從一門手稿語言發展成了更通用的程式語言。由於「直譯執行，記憶體管理，動態」等特性，它們仍被稱為手稿語言。但它們已經用於應用程式編寫，用戶也不把它們看作手稿語言。
</p>, <p>少數的語言被設計通過嵌入應用程式來取代應用程式客製化的手稿語言。開發者（如使用C等其它系統語言）包入使手稿語言可以控制應用程式的hook。這些語言和應用程式客製化的手稿語言是同種用途，但優點在於可以在應用程式之間傳遞一些技能。
</p>, <p>具體包括：
</p>, <p>JavaScript直到現在仍然是網頁瀏覽器內的主要程式語言，它的ECMAScript標準化保證了它成為流行的通用嵌入性語言。
</p>, <p>Tcl作為一種擴充性語言而建立，但更多地被用作通用性語言，就如同Python, Perl, Ruby一樣。
</p>, <p class="mw-empty-elt">
</p>]